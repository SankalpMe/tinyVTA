// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="acti_proc_acti_proc,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.200000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=66,HLS_SYN_DSP=0,HLS_SYN_FF=47081,HLS_SYN_LUT=27980,HLS_VERSION=2023_2}" *)

module acti_proc (
        ap_clk,
        ap_rst_n,
        m_axi_imem_AWVALID,
        m_axi_imem_AWREADY,
        m_axi_imem_AWADDR,
        m_axi_imem_AWID,
        m_axi_imem_AWLEN,
        m_axi_imem_AWSIZE,
        m_axi_imem_AWBURST,
        m_axi_imem_AWLOCK,
        m_axi_imem_AWCACHE,
        m_axi_imem_AWPROT,
        m_axi_imem_AWQOS,
        m_axi_imem_AWREGION,
        m_axi_imem_AWUSER,
        m_axi_imem_WVALID,
        m_axi_imem_WREADY,
        m_axi_imem_WDATA,
        m_axi_imem_WSTRB,
        m_axi_imem_WLAST,
        m_axi_imem_WID,
        m_axi_imem_WUSER,
        m_axi_imem_ARVALID,
        m_axi_imem_ARREADY,
        m_axi_imem_ARADDR,
        m_axi_imem_ARID,
        m_axi_imem_ARLEN,
        m_axi_imem_ARSIZE,
        m_axi_imem_ARBURST,
        m_axi_imem_ARLOCK,
        m_axi_imem_ARCACHE,
        m_axi_imem_ARPROT,
        m_axi_imem_ARQOS,
        m_axi_imem_ARREGION,
        m_axi_imem_ARUSER,
        m_axi_imem_RVALID,
        m_axi_imem_RREADY,
        m_axi_imem_RDATA,
        m_axi_imem_RLAST,
        m_axi_imem_RID,
        m_axi_imem_RUSER,
        m_axi_imem_RRESP,
        m_axi_imem_BVALID,
        m_axi_imem_BREADY,
        m_axi_imem_BRESP,
        m_axi_imem_BID,
        m_axi_imem_BUSER,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_state9 = 19'd256;
parameter    ap_ST_fsm_state10 = 19'd512;
parameter    ap_ST_fsm_state11 = 19'd1024;
parameter    ap_ST_fsm_state12 = 19'd2048;
parameter    ap_ST_fsm_state13 = 19'd4096;
parameter    ap_ST_fsm_state14 = 19'd8192;
parameter    ap_ST_fsm_state15 = 19'd16384;
parameter    ap_ST_fsm_state16 = 19'd32768;
parameter    ap_ST_fsm_state17 = 19'd65536;
parameter    ap_ST_fsm_state18 = 19'd131072;
parameter    ap_ST_fsm_state19 = 19'd262144;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_IMEM_ID_WIDTH = 1;
parameter    C_M_AXI_IMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_IMEM_DATA_WIDTH = 64;
parameter    C_M_AXI_IMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_IMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_IMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_IMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_IMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_IMEM_USER_VALUE = 0;
parameter    C_M_AXI_IMEM_PROT_VALUE = 0;
parameter    C_M_AXI_IMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MEM_ID_WIDTH = 1;
parameter    C_M_AXI_MEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_MEM_DATA_WIDTH = 512;
parameter    C_M_AXI_MEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_MEM_USER_VALUE = 0;
parameter    C_M_AXI_MEM_PROT_VALUE = 0;
parameter    C_M_AXI_MEM_CACHE_VALUE = 3;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_IMEM_WSTRB_WIDTH = (64 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MEM_WSTRB_WIDTH = (512 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_imem_AWVALID;
input   m_axi_imem_AWREADY;
output  [C_M_AXI_IMEM_ADDR_WIDTH - 1:0] m_axi_imem_AWADDR;
output  [C_M_AXI_IMEM_ID_WIDTH - 1:0] m_axi_imem_AWID;
output  [7:0] m_axi_imem_AWLEN;
output  [2:0] m_axi_imem_AWSIZE;
output  [1:0] m_axi_imem_AWBURST;
output  [1:0] m_axi_imem_AWLOCK;
output  [3:0] m_axi_imem_AWCACHE;
output  [2:0] m_axi_imem_AWPROT;
output  [3:0] m_axi_imem_AWQOS;
output  [3:0] m_axi_imem_AWREGION;
output  [C_M_AXI_IMEM_AWUSER_WIDTH - 1:0] m_axi_imem_AWUSER;
output   m_axi_imem_WVALID;
input   m_axi_imem_WREADY;
output  [C_M_AXI_IMEM_DATA_WIDTH - 1:0] m_axi_imem_WDATA;
output  [C_M_AXI_IMEM_WSTRB_WIDTH - 1:0] m_axi_imem_WSTRB;
output   m_axi_imem_WLAST;
output  [C_M_AXI_IMEM_ID_WIDTH - 1:0] m_axi_imem_WID;
output  [C_M_AXI_IMEM_WUSER_WIDTH - 1:0] m_axi_imem_WUSER;
output   m_axi_imem_ARVALID;
input   m_axi_imem_ARREADY;
output  [C_M_AXI_IMEM_ADDR_WIDTH - 1:0] m_axi_imem_ARADDR;
output  [C_M_AXI_IMEM_ID_WIDTH - 1:0] m_axi_imem_ARID;
output  [7:0] m_axi_imem_ARLEN;
output  [2:0] m_axi_imem_ARSIZE;
output  [1:0] m_axi_imem_ARBURST;
output  [1:0] m_axi_imem_ARLOCK;
output  [3:0] m_axi_imem_ARCACHE;
output  [2:0] m_axi_imem_ARPROT;
output  [3:0] m_axi_imem_ARQOS;
output  [3:0] m_axi_imem_ARREGION;
output  [C_M_AXI_IMEM_ARUSER_WIDTH - 1:0] m_axi_imem_ARUSER;
input   m_axi_imem_RVALID;
output   m_axi_imem_RREADY;
input  [C_M_AXI_IMEM_DATA_WIDTH - 1:0] m_axi_imem_RDATA;
input   m_axi_imem_RLAST;
input  [C_M_AXI_IMEM_ID_WIDTH - 1:0] m_axi_imem_RID;
input  [C_M_AXI_IMEM_RUSER_WIDTH - 1:0] m_axi_imem_RUSER;
input  [1:0] m_axi_imem_RRESP;
input   m_axi_imem_BVALID;
output   m_axi_imem_BREADY;
input  [1:0] m_axi_imem_BRESP;
input  [C_M_AXI_IMEM_ID_WIDTH - 1:0] m_axi_imem_BID;
input  [C_M_AXI_IMEM_BUSER_WIDTH - 1:0] m_axi_imem_BUSER;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_AWADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_AWID;
output  [7:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [C_M_AXI_MEM_AWUSER_WIDTH - 1:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_WDATA;
output  [C_M_AXI_MEM_WSTRB_WIDTH - 1:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_WID;
output  [C_M_AXI_MEM_WUSER_WIDTH - 1:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [C_M_AXI_MEM_ADDR_WIDTH - 1:0] m_axi_mem_ARADDR;
output  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_ARID;
output  [7:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [C_M_AXI_MEM_ARUSER_WIDTH - 1:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [C_M_AXI_MEM_DATA_WIDTH - 1:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_RID;
input  [C_M_AXI_MEM_RUSER_WIDTH - 1:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [C_M_AXI_MEM_ID_WIDTH - 1:0] m_axi_mem_BID;
input  [C_M_AXI_MEM_BUSER_WIDTH - 1:0] m_axi_mem_BUSER;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] insts;
wire   [63:0] mem_offset;
reg    imem_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    imem_blk_n_R;
wire    ap_CS_fsm_state11;
reg    imem_blk_n_AW;
wire    ap_CS_fsm_state13;
reg    imem_blk_n_W;
wire    ap_CS_fsm_state14;
reg    imem_blk_n_B;
wire    ap_CS_fsm_state19;
reg   [63:0] mem_offset_read_reg_295;
reg   [63:0] insts_read_reg_301;
wire   [0:0] icmp_ln85_fu_181_p2;
reg   [0:0] icmp_ln85_reg_309;
wire    ap_CS_fsm_state2;
wire   [9:0] add_ln85_fu_187_p2;
reg   [9:0] add_ln85_reg_313;
reg   [60:0] trunc_ln_reg_318;
reg   [63:0] imem_addr_reg_323;
reg   [63:0] abc_reg_330;
wire   [63:0] zext_ln85_fu_230_p1;
reg   [63:0] zext_ln85_reg_340;
wire    ap_CS_fsm_state12;
wire   [2:0] tmp2_fu_238_p4;
reg   [2:0] tmp2_reg_348;
reg   [12:0] N_reg_352;
reg   [15:0] bA_reg_358;
reg   [15:0] bB_reg_364;
wire   [15:0] bAB_fu_280_p1;
reg   [15:0] bAB_reg_370;
wire    grp_matmul_fu_152_ap_start;
wire    grp_matmul_fu_152_ap_done;
wire    grp_matmul_fu_152_ap_idle;
wire    grp_matmul_fu_152_ap_ready;
wire    grp_matmul_fu_152_m_axi_mem_AWVALID;
wire   [63:0] grp_matmul_fu_152_m_axi_mem_AWADDR;
wire   [0:0] grp_matmul_fu_152_m_axi_mem_AWID;
wire   [31:0] grp_matmul_fu_152_m_axi_mem_AWLEN;
wire   [2:0] grp_matmul_fu_152_m_axi_mem_AWSIZE;
wire   [1:0] grp_matmul_fu_152_m_axi_mem_AWBURST;
wire   [1:0] grp_matmul_fu_152_m_axi_mem_AWLOCK;
wire   [3:0] grp_matmul_fu_152_m_axi_mem_AWCACHE;
wire   [2:0] grp_matmul_fu_152_m_axi_mem_AWPROT;
wire   [3:0] grp_matmul_fu_152_m_axi_mem_AWQOS;
wire   [3:0] grp_matmul_fu_152_m_axi_mem_AWREGION;
wire   [0:0] grp_matmul_fu_152_m_axi_mem_AWUSER;
wire    grp_matmul_fu_152_m_axi_mem_WVALID;
wire   [511:0] grp_matmul_fu_152_m_axi_mem_WDATA;
wire   [63:0] grp_matmul_fu_152_m_axi_mem_WSTRB;
wire    grp_matmul_fu_152_m_axi_mem_WLAST;
wire   [0:0] grp_matmul_fu_152_m_axi_mem_WID;
wire   [0:0] grp_matmul_fu_152_m_axi_mem_WUSER;
wire    grp_matmul_fu_152_m_axi_mem_ARVALID;
wire   [63:0] grp_matmul_fu_152_m_axi_mem_ARADDR;
wire   [0:0] grp_matmul_fu_152_m_axi_mem_ARID;
wire   [31:0] grp_matmul_fu_152_m_axi_mem_ARLEN;
wire   [2:0] grp_matmul_fu_152_m_axi_mem_ARSIZE;
wire   [1:0] grp_matmul_fu_152_m_axi_mem_ARBURST;
wire   [1:0] grp_matmul_fu_152_m_axi_mem_ARLOCK;
wire   [3:0] grp_matmul_fu_152_m_axi_mem_ARCACHE;
wire   [2:0] grp_matmul_fu_152_m_axi_mem_ARPROT;
wire   [3:0] grp_matmul_fu_152_m_axi_mem_ARQOS;
wire   [3:0] grp_matmul_fu_152_m_axi_mem_ARREGION;
wire   [0:0] grp_matmul_fu_152_m_axi_mem_ARUSER;
wire    grp_matmul_fu_152_m_axi_mem_RREADY;
wire    grp_matmul_fu_152_m_axi_mem_BREADY;
wire    grp_activ_fu_163_ap_start;
wire    grp_activ_fu_163_ap_done;
wire    grp_activ_fu_163_ap_idle;
wire    grp_activ_fu_163_ap_ready;
wire    grp_activ_fu_163_m_axi_mem_AWVALID;
wire   [63:0] grp_activ_fu_163_m_axi_mem_AWADDR;
wire   [0:0] grp_activ_fu_163_m_axi_mem_AWID;
wire   [31:0] grp_activ_fu_163_m_axi_mem_AWLEN;
wire   [2:0] grp_activ_fu_163_m_axi_mem_AWSIZE;
wire   [1:0] grp_activ_fu_163_m_axi_mem_AWBURST;
wire   [1:0] grp_activ_fu_163_m_axi_mem_AWLOCK;
wire   [3:0] grp_activ_fu_163_m_axi_mem_AWCACHE;
wire   [2:0] grp_activ_fu_163_m_axi_mem_AWPROT;
wire   [3:0] grp_activ_fu_163_m_axi_mem_AWQOS;
wire   [3:0] grp_activ_fu_163_m_axi_mem_AWREGION;
wire   [0:0] grp_activ_fu_163_m_axi_mem_AWUSER;
wire    grp_activ_fu_163_m_axi_mem_WVALID;
wire   [511:0] grp_activ_fu_163_m_axi_mem_WDATA;
wire   [63:0] grp_activ_fu_163_m_axi_mem_WSTRB;
wire    grp_activ_fu_163_m_axi_mem_WLAST;
wire   [0:0] grp_activ_fu_163_m_axi_mem_WID;
wire   [0:0] grp_activ_fu_163_m_axi_mem_WUSER;
wire    grp_activ_fu_163_m_axi_mem_ARVALID;
wire   [63:0] grp_activ_fu_163_m_axi_mem_ARADDR;
wire   [0:0] grp_activ_fu_163_m_axi_mem_ARID;
wire   [31:0] grp_activ_fu_163_m_axi_mem_ARLEN;
wire   [2:0] grp_activ_fu_163_m_axi_mem_ARSIZE;
wire   [1:0] grp_activ_fu_163_m_axi_mem_ARBURST;
wire   [1:0] grp_activ_fu_163_m_axi_mem_ARLOCK;
wire   [3:0] grp_activ_fu_163_m_axi_mem_ARCACHE;
wire   [2:0] grp_activ_fu_163_m_axi_mem_ARPROT;
wire   [3:0] grp_activ_fu_163_m_axi_mem_ARQOS;
wire   [3:0] grp_activ_fu_163_m_axi_mem_ARREGION;
wire   [0:0] grp_activ_fu_163_m_axi_mem_ARUSER;
wire    grp_activ_fu_163_m_axi_mem_RREADY;
wire    grp_activ_fu_163_m_axi_mem_BREADY;
reg    imem_AWVALID;
wire    imem_AWREADY;
reg    imem_WVALID;
wire    imem_WREADY;
reg    imem_ARVALID;
wire    imem_ARREADY;
wire    imem_RVALID;
reg    imem_RREADY;
wire   [63:0] imem_RDATA;
wire   [8:0] imem_RFIFONUM;
wire    imem_BVALID;
reg    imem_BREADY;
reg    mem_AWVALID;
wire    mem_AWREADY;
reg   [63:0] mem_AWADDR;
reg   [31:0] mem_AWLEN;
reg    mem_WVALID;
wire    mem_WREADY;
reg   [511:0] mem_WDATA;
reg   [63:0] mem_WSTRB;
reg    mem_ARVALID;
wire    mem_ARREADY;
reg   [63:0] mem_ARADDR;
reg   [31:0] mem_ARLEN;
wire    mem_RVALID;
reg    mem_RREADY;
wire   [511:0] mem_RDATA;
wire   [8:0] mem_RFIFONUM;
wire    mem_BVALID;
reg    mem_BREADY;
reg    grp_matmul_fu_152_ap_start_reg;
wire   [0:0] icmp_ln88_fu_233_p2;
reg    grp_activ_fu_163_ap_start_reg;
wire   [63:0] sext_ln87_fu_220_p1;
reg    ap_block_state13_on_subcall_done;
reg   [9:0] pc_fu_114;
wire   [12:0] shl_ln_fu_193_p3;
wire   [63:0] zext_ln87_fu_201_p1;
wire   [63:0] add_ln87_fu_205_p2;
reg   [18:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
reg    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
reg    ap_ST_fsm_state19_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 19'd1;
#0 grp_matmul_fu_152_ap_start_reg = 1'b0;
#0 grp_activ_fu_163_ap_start_reg = 1'b0;
#0 pc_fu_114 = 10'd0;
end

acti_proc_matmul grp_matmul_fu_152(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_matmul_fu_152_ap_start),
    .ap_done(grp_matmul_fu_152_ap_done),
    .ap_idle(grp_matmul_fu_152_ap_idle),
    .ap_ready(grp_matmul_fu_152_ap_ready),
    .m_axi_mem_AWVALID(grp_matmul_fu_152_m_axi_mem_AWVALID),
    .m_axi_mem_AWREADY(mem_AWREADY),
    .m_axi_mem_AWADDR(grp_matmul_fu_152_m_axi_mem_AWADDR),
    .m_axi_mem_AWID(grp_matmul_fu_152_m_axi_mem_AWID),
    .m_axi_mem_AWLEN(grp_matmul_fu_152_m_axi_mem_AWLEN),
    .m_axi_mem_AWSIZE(grp_matmul_fu_152_m_axi_mem_AWSIZE),
    .m_axi_mem_AWBURST(grp_matmul_fu_152_m_axi_mem_AWBURST),
    .m_axi_mem_AWLOCK(grp_matmul_fu_152_m_axi_mem_AWLOCK),
    .m_axi_mem_AWCACHE(grp_matmul_fu_152_m_axi_mem_AWCACHE),
    .m_axi_mem_AWPROT(grp_matmul_fu_152_m_axi_mem_AWPROT),
    .m_axi_mem_AWQOS(grp_matmul_fu_152_m_axi_mem_AWQOS),
    .m_axi_mem_AWREGION(grp_matmul_fu_152_m_axi_mem_AWREGION),
    .m_axi_mem_AWUSER(grp_matmul_fu_152_m_axi_mem_AWUSER),
    .m_axi_mem_WVALID(grp_matmul_fu_152_m_axi_mem_WVALID),
    .m_axi_mem_WREADY(mem_WREADY),
    .m_axi_mem_WDATA(grp_matmul_fu_152_m_axi_mem_WDATA),
    .m_axi_mem_WSTRB(grp_matmul_fu_152_m_axi_mem_WSTRB),
    .m_axi_mem_WLAST(grp_matmul_fu_152_m_axi_mem_WLAST),
    .m_axi_mem_WID(grp_matmul_fu_152_m_axi_mem_WID),
    .m_axi_mem_WUSER(grp_matmul_fu_152_m_axi_mem_WUSER),
    .m_axi_mem_ARVALID(grp_matmul_fu_152_m_axi_mem_ARVALID),
    .m_axi_mem_ARREADY(mem_ARREADY),
    .m_axi_mem_ARADDR(grp_matmul_fu_152_m_axi_mem_ARADDR),
    .m_axi_mem_ARID(grp_matmul_fu_152_m_axi_mem_ARID),
    .m_axi_mem_ARLEN(grp_matmul_fu_152_m_axi_mem_ARLEN),
    .m_axi_mem_ARSIZE(grp_matmul_fu_152_m_axi_mem_ARSIZE),
    .m_axi_mem_ARBURST(grp_matmul_fu_152_m_axi_mem_ARBURST),
    .m_axi_mem_ARLOCK(grp_matmul_fu_152_m_axi_mem_ARLOCK),
    .m_axi_mem_ARCACHE(grp_matmul_fu_152_m_axi_mem_ARCACHE),
    .m_axi_mem_ARPROT(grp_matmul_fu_152_m_axi_mem_ARPROT),
    .m_axi_mem_ARQOS(grp_matmul_fu_152_m_axi_mem_ARQOS),
    .m_axi_mem_ARREGION(grp_matmul_fu_152_m_axi_mem_ARREGION),
    .m_axi_mem_ARUSER(grp_matmul_fu_152_m_axi_mem_ARUSER),
    .m_axi_mem_RVALID(mem_RVALID),
    .m_axi_mem_RREADY(grp_matmul_fu_152_m_axi_mem_RREADY),
    .m_axi_mem_RDATA(mem_RDATA),
    .m_axi_mem_RLAST(1'b0),
    .m_axi_mem_RID(1'd0),
    .m_axi_mem_RFIFONUM(mem_RFIFONUM),
    .m_axi_mem_RUSER(1'd0),
    .m_axi_mem_RRESP(2'd0),
    .m_axi_mem_BVALID(mem_BVALID),
    .m_axi_mem_BREADY(grp_matmul_fu_152_m_axi_mem_BREADY),
    .m_axi_mem_BRESP(2'd0),
    .m_axi_mem_BID(1'd0),
    .m_axi_mem_BUSER(1'd0),
    .mem1(mem_offset_read_reg_295),
    .bA(bA_reg_358),
    .bB(bB_reg_364),
    .bAB(bAB_reg_370),
    .N(N_reg_352)
);

acti_proc_activ grp_activ_fu_163(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_activ_fu_163_ap_start),
    .ap_done(grp_activ_fu_163_ap_done),
    .ap_idle(grp_activ_fu_163_ap_idle),
    .ap_ready(grp_activ_fu_163_ap_ready),
    .m_axi_mem_AWVALID(grp_activ_fu_163_m_axi_mem_AWVALID),
    .m_axi_mem_AWREADY(mem_AWREADY),
    .m_axi_mem_AWADDR(grp_activ_fu_163_m_axi_mem_AWADDR),
    .m_axi_mem_AWID(grp_activ_fu_163_m_axi_mem_AWID),
    .m_axi_mem_AWLEN(grp_activ_fu_163_m_axi_mem_AWLEN),
    .m_axi_mem_AWSIZE(grp_activ_fu_163_m_axi_mem_AWSIZE),
    .m_axi_mem_AWBURST(grp_activ_fu_163_m_axi_mem_AWBURST),
    .m_axi_mem_AWLOCK(grp_activ_fu_163_m_axi_mem_AWLOCK),
    .m_axi_mem_AWCACHE(grp_activ_fu_163_m_axi_mem_AWCACHE),
    .m_axi_mem_AWPROT(grp_activ_fu_163_m_axi_mem_AWPROT),
    .m_axi_mem_AWQOS(grp_activ_fu_163_m_axi_mem_AWQOS),
    .m_axi_mem_AWREGION(grp_activ_fu_163_m_axi_mem_AWREGION),
    .m_axi_mem_AWUSER(grp_activ_fu_163_m_axi_mem_AWUSER),
    .m_axi_mem_WVALID(grp_activ_fu_163_m_axi_mem_WVALID),
    .m_axi_mem_WREADY(mem_WREADY),
    .m_axi_mem_WDATA(grp_activ_fu_163_m_axi_mem_WDATA),
    .m_axi_mem_WSTRB(grp_activ_fu_163_m_axi_mem_WSTRB),
    .m_axi_mem_WLAST(grp_activ_fu_163_m_axi_mem_WLAST),
    .m_axi_mem_WID(grp_activ_fu_163_m_axi_mem_WID),
    .m_axi_mem_WUSER(grp_activ_fu_163_m_axi_mem_WUSER),
    .m_axi_mem_ARVALID(grp_activ_fu_163_m_axi_mem_ARVALID),
    .m_axi_mem_ARREADY(mem_ARREADY),
    .m_axi_mem_ARADDR(grp_activ_fu_163_m_axi_mem_ARADDR),
    .m_axi_mem_ARID(grp_activ_fu_163_m_axi_mem_ARID),
    .m_axi_mem_ARLEN(grp_activ_fu_163_m_axi_mem_ARLEN),
    .m_axi_mem_ARSIZE(grp_activ_fu_163_m_axi_mem_ARSIZE),
    .m_axi_mem_ARBURST(grp_activ_fu_163_m_axi_mem_ARBURST),
    .m_axi_mem_ARLOCK(grp_activ_fu_163_m_axi_mem_ARLOCK),
    .m_axi_mem_ARCACHE(grp_activ_fu_163_m_axi_mem_ARCACHE),
    .m_axi_mem_ARPROT(grp_activ_fu_163_m_axi_mem_ARPROT),
    .m_axi_mem_ARQOS(grp_activ_fu_163_m_axi_mem_ARQOS),
    .m_axi_mem_ARREGION(grp_activ_fu_163_m_axi_mem_ARREGION),
    .m_axi_mem_ARUSER(grp_activ_fu_163_m_axi_mem_ARUSER),
    .m_axi_mem_RVALID(mem_RVALID),
    .m_axi_mem_RREADY(grp_activ_fu_163_m_axi_mem_RREADY),
    .m_axi_mem_RDATA(mem_RDATA),
    .m_axi_mem_RLAST(1'b0),
    .m_axi_mem_RID(1'd0),
    .m_axi_mem_RFIFONUM(mem_RFIFONUM),
    .m_axi_mem_RUSER(1'd0),
    .m_axi_mem_RRESP(2'd0),
    .m_axi_mem_BVALID(mem_BVALID),
    .m_axi_mem_BREADY(grp_activ_fu_163_m_axi_mem_BREADY),
    .m_axi_mem_BRESP(2'd0),
    .m_axi_mem_BID(1'd0),
    .m_axi_mem_BUSER(1'd0),
    .A(mem_offset_read_reg_295),
    .ro(bA_reg_358),
    .wo(bB_reg_364),
    .N(N_reg_352)
);

acti_proc_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .insts(insts),
    .mem_offset(mem_offset),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

acti_proc_imem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_IMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_IMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_IMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_IMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_IMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_IMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_IMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_IMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_IMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_IMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_IMEM_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 64 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
imem_m_axi_U(
    .AWVALID(m_axi_imem_AWVALID),
    .AWREADY(m_axi_imem_AWREADY),
    .AWADDR(m_axi_imem_AWADDR),
    .AWID(m_axi_imem_AWID),
    .AWLEN(m_axi_imem_AWLEN),
    .AWSIZE(m_axi_imem_AWSIZE),
    .AWBURST(m_axi_imem_AWBURST),
    .AWLOCK(m_axi_imem_AWLOCK),
    .AWCACHE(m_axi_imem_AWCACHE),
    .AWPROT(m_axi_imem_AWPROT),
    .AWQOS(m_axi_imem_AWQOS),
    .AWREGION(m_axi_imem_AWREGION),
    .AWUSER(m_axi_imem_AWUSER),
    .WVALID(m_axi_imem_WVALID),
    .WREADY(m_axi_imem_WREADY),
    .WDATA(m_axi_imem_WDATA),
    .WSTRB(m_axi_imem_WSTRB),
    .WLAST(m_axi_imem_WLAST),
    .WID(m_axi_imem_WID),
    .WUSER(m_axi_imem_WUSER),
    .ARVALID(m_axi_imem_ARVALID),
    .ARREADY(m_axi_imem_ARREADY),
    .ARADDR(m_axi_imem_ARADDR),
    .ARID(m_axi_imem_ARID),
    .ARLEN(m_axi_imem_ARLEN),
    .ARSIZE(m_axi_imem_ARSIZE),
    .ARBURST(m_axi_imem_ARBURST),
    .ARLOCK(m_axi_imem_ARLOCK),
    .ARCACHE(m_axi_imem_ARCACHE),
    .ARPROT(m_axi_imem_ARPROT),
    .ARQOS(m_axi_imem_ARQOS),
    .ARREGION(m_axi_imem_ARREGION),
    .ARUSER(m_axi_imem_ARUSER),
    .RVALID(m_axi_imem_RVALID),
    .RREADY(m_axi_imem_RREADY),
    .RDATA(m_axi_imem_RDATA),
    .RLAST(m_axi_imem_RLAST),
    .RID(m_axi_imem_RID),
    .RUSER(m_axi_imem_RUSER),
    .RRESP(m_axi_imem_RRESP),
    .BVALID(m_axi_imem_BVALID),
    .BREADY(m_axi_imem_BREADY),
    .BRESP(m_axi_imem_BRESP),
    .BID(m_axi_imem_BID),
    .BUSER(m_axi_imem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(imem_ARVALID),
    .I_ARREADY(imem_ARREADY),
    .I_ARADDR(sext_ln87_fu_220_p1),
    .I_ARLEN(32'd1),
    .I_RVALID(imem_RVALID),
    .I_RREADY(imem_RREADY),
    .I_RDATA(imem_RDATA),
    .I_RFIFONUM(imem_RFIFONUM),
    .I_AWVALID(imem_AWVALID),
    .I_AWREADY(imem_AWREADY),
    .I_AWADDR(imem_addr_reg_323),
    .I_AWLEN(32'd1),
    .I_WVALID(imem_WVALID),
    .I_WREADY(imem_WREADY),
    .I_WDATA(zext_ln85_reg_340),
    .I_WSTRB(8'd255),
    .I_BVALID(imem_BVALID),
    .I_BREADY(imem_BREADY)
);

acti_proc_mem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_MEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MEM_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 512 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
mem_m_axi_U(
    .AWVALID(m_axi_mem_AWVALID),
    .AWREADY(m_axi_mem_AWREADY),
    .AWADDR(m_axi_mem_AWADDR),
    .AWID(m_axi_mem_AWID),
    .AWLEN(m_axi_mem_AWLEN),
    .AWSIZE(m_axi_mem_AWSIZE),
    .AWBURST(m_axi_mem_AWBURST),
    .AWLOCK(m_axi_mem_AWLOCK),
    .AWCACHE(m_axi_mem_AWCACHE),
    .AWPROT(m_axi_mem_AWPROT),
    .AWQOS(m_axi_mem_AWQOS),
    .AWREGION(m_axi_mem_AWREGION),
    .AWUSER(m_axi_mem_AWUSER),
    .WVALID(m_axi_mem_WVALID),
    .WREADY(m_axi_mem_WREADY),
    .WDATA(m_axi_mem_WDATA),
    .WSTRB(m_axi_mem_WSTRB),
    .WLAST(m_axi_mem_WLAST),
    .WID(m_axi_mem_WID),
    .WUSER(m_axi_mem_WUSER),
    .ARVALID(m_axi_mem_ARVALID),
    .ARREADY(m_axi_mem_ARREADY),
    .ARADDR(m_axi_mem_ARADDR),
    .ARID(m_axi_mem_ARID),
    .ARLEN(m_axi_mem_ARLEN),
    .ARSIZE(m_axi_mem_ARSIZE),
    .ARBURST(m_axi_mem_ARBURST),
    .ARLOCK(m_axi_mem_ARLOCK),
    .ARCACHE(m_axi_mem_ARCACHE),
    .ARPROT(m_axi_mem_ARPROT),
    .ARQOS(m_axi_mem_ARQOS),
    .ARREGION(m_axi_mem_ARREGION),
    .ARUSER(m_axi_mem_ARUSER),
    .RVALID(m_axi_mem_RVALID),
    .RREADY(m_axi_mem_RREADY),
    .RDATA(m_axi_mem_RDATA),
    .RLAST(m_axi_mem_RLAST),
    .RID(m_axi_mem_RID),
    .RUSER(m_axi_mem_RUSER),
    .RRESP(m_axi_mem_RRESP),
    .BVALID(m_axi_mem_BVALID),
    .BREADY(m_axi_mem_BREADY),
    .BRESP(m_axi_mem_BRESP),
    .BID(m_axi_mem_BID),
    .BUSER(m_axi_mem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(mem_ARVALID),
    .I_ARREADY(mem_ARREADY),
    .I_ARADDR(mem_ARADDR),
    .I_ARLEN(mem_ARLEN),
    .I_RVALID(mem_RVALID),
    .I_RREADY(mem_RREADY),
    .I_RDATA(mem_RDATA),
    .I_RFIFONUM(mem_RFIFONUM),
    .I_AWVALID(mem_AWVALID),
    .I_AWREADY(mem_AWREADY),
    .I_AWADDR(mem_AWADDR),
    .I_AWLEN(mem_AWLEN),
    .I_WVALID(mem_WVALID),
    .I_WREADY(mem_WREADY),
    .I_WDATA(mem_WDATA),
    .I_WSTRB(mem_WSTRB),
    .I_BVALID(mem_BVALID),
    .I_BREADY(mem_BREADY)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_activ_fu_163_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0))) begin
            grp_activ_fu_163_ap_start_reg <= 1'b1;
        end else if ((grp_activ_fu_163_ap_ready == 1'b1)) begin
            grp_activ_fu_163_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_matmul_fu_152_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd2) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0))) begin
            grp_matmul_fu_152_ap_start_reg <= 1'b1;
        end else if ((grp_matmul_fu_152_ap_ready == 1'b1)) begin
            grp_matmul_fu_152_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        pc_fu_114 <= 10'd0;
    end else if ((~((imem_AWREADY == 1'b0) | (1'b1 == ap_block_state13_on_subcall_done)) & (1'b1 == ap_CS_fsm_state13))) begin
        pc_fu_114 <= add_ln85_reg_313;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        N_reg_352 <= {{abc_reg_330[60:48]}};
        bAB_reg_370 <= bAB_fu_280_p1;
        bA_reg_358 <= {{abc_reg_330[47:32]}};
        bB_reg_364 <= {{abc_reg_330[31:16]}};
        tmp2_reg_348 <= {{abc_reg_330[63:61]}};
        zext_ln85_reg_340[9 : 0] <= zext_ln85_fu_230_p1[9 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        abc_reg_330 <= imem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln85_reg_313 <= add_ln85_fu_187_p2;
        icmp_ln85_reg_309 <= icmp_ln85_fu_181_p2;
        trunc_ln_reg_318 <= {{add_ln87_fu_205_p2[63:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        imem_addr_reg_323 <= sext_ln87_fu_220_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        insts_read_reg_301 <= insts;
        mem_offset_read_reg_295 <= mem_offset;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((imem_RVALID == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if (((imem_AWREADY == 1'b0) | (1'b1 == ap_block_state13_on_subcall_done))) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((imem_WREADY == 1'b0)) begin
        ap_ST_fsm_state14_blk = 1'b1;
    end else begin
        ap_ST_fsm_state14_blk = 1'b0;
    end
end

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

always @ (*) begin
    if ((imem_BVALID == 1'b0)) begin
        ap_ST_fsm_state19_blk = 1'b1;
    end else begin
        ap_ST_fsm_state19_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((imem_ARREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & ((icmp_ln88_fu_233_p2 == 1'd1) | (icmp_ln85_reg_309 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & ((icmp_ln88_fu_233_p2 == 1'd1) | (icmp_ln85_reg_309 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((imem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        imem_ARVALID = 1'b1;
    end else begin
        imem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((imem_AWREADY == 1'b0) | (1'b1 == ap_block_state13_on_subcall_done)) & (1'b1 == ap_CS_fsm_state13))) begin
        imem_AWVALID = 1'b1;
    end else begin
        imem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((imem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
        imem_BREADY = 1'b1;
    end else begin
        imem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((imem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        imem_RREADY = 1'b1;
    end else begin
        imem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((imem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
        imem_WVALID = 1'b1;
    end else begin
        imem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        imem_blk_n_AR = m_axi_imem_ARREADY;
    end else begin
        imem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        imem_blk_n_AW = m_axi_imem_AWREADY;
    end else begin
        imem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        imem_blk_n_B = m_axi_imem_BVALID;
    end else begin
        imem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        imem_blk_n_R = m_axi_imem_RVALID;
    end else begin
        imem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        imem_blk_n_W = m_axi_imem_WREADY;
    end else begin
        imem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((((tmp2_reg_348 == 3'd1) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_ARADDR = grp_activ_fu_163_m_axi_mem_ARADDR;
    end else if ((((tmp2_reg_348 == 3'd2) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd2) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_ARADDR = grp_matmul_fu_152_m_axi_mem_ARADDR;
    end else begin
        mem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((tmp2_reg_348 == 3'd1) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_ARLEN = grp_activ_fu_163_m_axi_mem_ARLEN;
    end else if ((((tmp2_reg_348 == 3'd2) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd2) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_ARLEN = grp_matmul_fu_152_m_axi_mem_ARLEN;
    end else begin
        mem_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((tmp2_reg_348 == 3'd1) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_ARVALID = grp_activ_fu_163_m_axi_mem_ARVALID;
    end else if ((((tmp2_reg_348 == 3'd2) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd2) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_ARVALID = grp_matmul_fu_152_m_axi_mem_ARVALID;
    end else begin
        mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp2_reg_348 == 3'd1) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_AWADDR = grp_activ_fu_163_m_axi_mem_AWADDR;
    end else if ((((tmp2_reg_348 == 3'd2) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd2) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_AWADDR = grp_matmul_fu_152_m_axi_mem_AWADDR;
    end else begin
        mem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((tmp2_reg_348 == 3'd1) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_AWLEN = grp_activ_fu_163_m_axi_mem_AWLEN;
    end else if ((((tmp2_reg_348 == 3'd2) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd2) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_AWLEN = grp_matmul_fu_152_m_axi_mem_AWLEN;
    end else begin
        mem_AWLEN = 'bx;
    end
end

always @ (*) begin
    if ((((tmp2_reg_348 == 3'd1) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_AWVALID = grp_activ_fu_163_m_axi_mem_AWVALID;
    end else if ((((tmp2_reg_348 == 3'd2) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd2) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_AWVALID = grp_matmul_fu_152_m_axi_mem_AWVALID;
    end else begin
        mem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp2_reg_348 == 3'd1) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_BREADY = grp_activ_fu_163_m_axi_mem_BREADY;
    end else if ((((tmp2_reg_348 == 3'd2) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd2) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_BREADY = grp_matmul_fu_152_m_axi_mem_BREADY;
    end else begin
        mem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp2_reg_348 == 3'd1) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_RREADY = grp_activ_fu_163_m_axi_mem_RREADY;
    end else if ((((tmp2_reg_348 == 3'd2) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd2) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_RREADY = grp_matmul_fu_152_m_axi_mem_RREADY;
    end else begin
        mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((tmp2_reg_348 == 3'd1) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_WDATA = grp_activ_fu_163_m_axi_mem_WDATA;
    end else if ((((tmp2_reg_348 == 3'd2) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd2) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_WDATA = grp_matmul_fu_152_m_axi_mem_WDATA;
    end else begin
        mem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((tmp2_reg_348 == 3'd1) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_WSTRB = grp_activ_fu_163_m_axi_mem_WSTRB;
    end else if ((((tmp2_reg_348 == 3'd2) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd2) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_WSTRB = grp_matmul_fu_152_m_axi_mem_WSTRB;
    end else begin
        mem_WSTRB = 'bx;
    end
end

always @ (*) begin
    if ((((tmp2_reg_348 == 3'd1) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd1) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_WVALID = grp_activ_fu_163_m_axi_mem_WVALID;
    end else if ((((tmp2_reg_348 == 3'd2) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln88_fu_233_p2 == 1'd0) & (tmp2_fu_238_p4 == 3'd2) & (1'b1 == ap_CS_fsm_state12) & (icmp_ln85_reg_309 == 1'd0)))) begin
        mem_WVALID = grp_matmul_fu_152_m_axi_mem_WVALID;
    end else begin
        mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln85_fu_181_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((imem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((imem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & ((icmp_ln88_fu_233_p2 == 1'd1) | (icmp_ln85_reg_309 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            if ((~((imem_AWREADY == 1'b0) | (1'b1 == ap_block_state13_on_subcall_done)) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((imem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((imem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln85_fu_187_p2 = (pc_fu_114 + 10'd1);

assign add_ln87_fu_205_p2 = (zext_ln87_fu_201_p1 + insts_read_reg_301);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state13_on_subcall_done = (((grp_activ_fu_163_ap_done == 1'b0) & (tmp2_reg_348 == 3'd1)) | ((grp_matmul_fu_152_ap_done == 1'b0) & (tmp2_reg_348 == 3'd2)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bAB_fu_280_p1 = abc_reg_330[15:0];

assign grp_activ_fu_163_ap_start = grp_activ_fu_163_ap_start_reg;

assign grp_matmul_fu_152_ap_start = grp_matmul_fu_152_ap_start_reg;

assign icmp_ln85_fu_181_p2 = ((pc_fu_114 == 10'd1000) ? 1'b1 : 1'b0);

assign icmp_ln88_fu_233_p2 = ((abc_reg_330 == 64'd0) ? 1'b1 : 1'b0);

assign sext_ln87_fu_220_p1 = $signed(trunc_ln_reg_318);

assign shl_ln_fu_193_p3 = {{pc_fu_114}, {3'd0}};

assign tmp2_fu_238_p4 = {{abc_reg_330[63:61]}};

assign zext_ln85_fu_230_p1 = pc_fu_114;

assign zext_ln87_fu_201_p1 = shl_ln_fu_193_p3;

always @ (posedge ap_clk) begin
    zext_ln85_reg_340[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
end

endmodule //acti_proc
