-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity acti_proc is
generic (
    C_M_AXI_IMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_IMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_IMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMEM_DATA_WIDTH : INTEGER := 64;
    C_M_AXI_IMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_IMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_MEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_DATA_WIDTH : INTEGER := 512;
    C_M_AXI_MEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_MEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_IMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_IMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_IMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_MEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_MEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_MEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_imem_AWVALID : OUT STD_LOGIC;
    m_axi_imem_AWREADY : IN STD_LOGIC;
    m_axi_imem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMEM_ADDR_WIDTH-1 downto 0);
    m_axi_imem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMEM_ID_WIDTH-1 downto 0);
    m_axi_imem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_imem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_imem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_imem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_imem_WVALID : OUT STD_LOGIC;
    m_axi_imem_WREADY : IN STD_LOGIC;
    m_axi_imem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_IMEM_DATA_WIDTH-1 downto 0);
    m_axi_imem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_IMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_imem_WLAST : OUT STD_LOGIC;
    m_axi_imem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMEM_ID_WIDTH-1 downto 0);
    m_axi_imem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMEM_WUSER_WIDTH-1 downto 0);
    m_axi_imem_ARVALID : OUT STD_LOGIC;
    m_axi_imem_ARREADY : IN STD_LOGIC;
    m_axi_imem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_IMEM_ADDR_WIDTH-1 downto 0);
    m_axi_imem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_IMEM_ID_WIDTH-1 downto 0);
    m_axi_imem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_imem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_imem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_imem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_imem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_IMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_imem_RVALID : IN STD_LOGIC;
    m_axi_imem_RREADY : OUT STD_LOGIC;
    m_axi_imem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_IMEM_DATA_WIDTH-1 downto 0);
    m_axi_imem_RLAST : IN STD_LOGIC;
    m_axi_imem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_IMEM_ID_WIDTH-1 downto 0);
    m_axi_imem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMEM_RUSER_WIDTH-1 downto 0);
    m_axi_imem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imem_BVALID : IN STD_LOGIC;
    m_axi_imem_BREADY : OUT STD_LOGIC;
    m_axi_imem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_imem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_IMEM_ID_WIDTH-1 downto 0);
    m_axi_imem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_IMEM_BUSER_WIDTH-1 downto 0);
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_AWUSER_WIDTH-1 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH/8-1 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_WUSER_WIDTH-1 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ADDR_WIDTH-1 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_MEM_ARUSER_WIDTH-1 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_DATA_WIDTH-1 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_RUSER_WIDTH-1 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_ID_WIDTH-1 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_MEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of acti_proc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "acti_proc_acti_proc,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.200000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=66,HLS_SYN_DSP=0,HLS_SYN_FF=47081,HLS_SYN_LUT=27980,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal insts : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_offset : STD_LOGIC_VECTOR (63 downto 0);
    signal imem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal imem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal imem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal imem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal imem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal mem_offset_read_reg_295 : STD_LOGIC_VECTOR (63 downto 0);
    signal insts_read_reg_301 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln85_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_309 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln85_fu_187_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln85_reg_313 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln_reg_318 : STD_LOGIC_VECTOR (60 downto 0);
    signal imem_addr_reg_323 : STD_LOGIC_VECTOR (63 downto 0);
    signal abc_reg_330 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln85_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln85_reg_340 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp2_fu_238_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp2_reg_348 : STD_LOGIC_VECTOR (2 downto 0);
    signal N_reg_352 : STD_LOGIC_VECTOR (12 downto 0);
    signal bA_reg_358 : STD_LOGIC_VECTOR (15 downto 0);
    signal bB_reg_364 : STD_LOGIC_VECTOR (15 downto 0);
    signal bAB_fu_280_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bAB_reg_370 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_matmul_fu_152_ap_start : STD_LOGIC;
    signal grp_matmul_fu_152_ap_done : STD_LOGIC;
    signal grp_matmul_fu_152_ap_idle : STD_LOGIC;
    signal grp_matmul_fu_152_ap_ready : STD_LOGIC;
    signal grp_matmul_fu_152_m_axi_mem_AWVALID : STD_LOGIC;
    signal grp_matmul_fu_152_m_axi_mem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_WVALID : STD_LOGIC;
    signal grp_matmul_fu_152_m_axi_mem_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_WLAST : STD_LOGIC;
    signal grp_matmul_fu_152_m_axi_mem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_ARVALID : STD_LOGIC;
    signal grp_matmul_fu_152_m_axi_mem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_matmul_fu_152_m_axi_mem_RREADY : STD_LOGIC;
    signal grp_matmul_fu_152_m_axi_mem_BREADY : STD_LOGIC;
    signal grp_activ_fu_163_ap_start : STD_LOGIC;
    signal grp_activ_fu_163_ap_done : STD_LOGIC;
    signal grp_activ_fu_163_ap_idle : STD_LOGIC;
    signal grp_activ_fu_163_ap_ready : STD_LOGIC;
    signal grp_activ_fu_163_m_axi_mem_AWVALID : STD_LOGIC;
    signal grp_activ_fu_163_m_axi_mem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_activ_fu_163_m_axi_mem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_activ_fu_163_m_axi_mem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_activ_fu_163_m_axi_mem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_activ_fu_163_m_axi_mem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_activ_fu_163_m_axi_mem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_activ_fu_163_m_axi_mem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_activ_fu_163_m_axi_mem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_activ_fu_163_m_axi_mem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_activ_fu_163_m_axi_mem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_activ_fu_163_m_axi_mem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_activ_fu_163_m_axi_mem_WVALID : STD_LOGIC;
    signal grp_activ_fu_163_m_axi_mem_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal grp_activ_fu_163_m_axi_mem_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_activ_fu_163_m_axi_mem_WLAST : STD_LOGIC;
    signal grp_activ_fu_163_m_axi_mem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_activ_fu_163_m_axi_mem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_activ_fu_163_m_axi_mem_ARVALID : STD_LOGIC;
    signal grp_activ_fu_163_m_axi_mem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_activ_fu_163_m_axi_mem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_activ_fu_163_m_axi_mem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_activ_fu_163_m_axi_mem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_activ_fu_163_m_axi_mem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_activ_fu_163_m_axi_mem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_activ_fu_163_m_axi_mem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_activ_fu_163_m_axi_mem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_activ_fu_163_m_axi_mem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_activ_fu_163_m_axi_mem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_activ_fu_163_m_axi_mem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_activ_fu_163_m_axi_mem_RREADY : STD_LOGIC;
    signal grp_activ_fu_163_m_axi_mem_BREADY : STD_LOGIC;
    signal imem_AWVALID : STD_LOGIC;
    signal imem_AWREADY : STD_LOGIC;
    signal imem_WVALID : STD_LOGIC;
    signal imem_WREADY : STD_LOGIC;
    signal imem_ARVALID : STD_LOGIC;
    signal imem_ARREADY : STD_LOGIC;
    signal imem_RVALID : STD_LOGIC;
    signal imem_RREADY : STD_LOGIC;
    signal imem_RDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal imem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal imem_BVALID : STD_LOGIC;
    signal imem_BREADY : STD_LOGIC;
    signal mem_AWVALID : STD_LOGIC;
    signal mem_AWREADY : STD_LOGIC;
    signal mem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_WVALID : STD_LOGIC;
    signal mem_WREADY : STD_LOGIC;
    signal mem_WDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal mem_WSTRB : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_ARVALID : STD_LOGIC;
    signal mem_ARREADY : STD_LOGIC;
    signal mem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal mem_RVALID : STD_LOGIC;
    signal mem_RREADY : STD_LOGIC;
    signal mem_RDATA : STD_LOGIC_VECTOR (511 downto 0);
    signal mem_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal mem_BVALID : STD_LOGIC;
    signal mem_BREADY : STD_LOGIC;
    signal grp_matmul_fu_152_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln88_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_activ_fu_163_ap_start_reg : STD_LOGIC := '0';
    signal sext_ln87_fu_220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state13_on_subcall_done : BOOLEAN;
    signal pc_fu_114 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal shl_ln_fu_193_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln87_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln87_fu_205_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component acti_proc_matmul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_mem_AWVALID : OUT STD_LOGIC;
        m_axi_mem_AWREADY : IN STD_LOGIC;
        m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_WVALID : OUT STD_LOGIC;
        m_axi_mem_WREADY : IN STD_LOGIC;
        m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mem_WLAST : OUT STD_LOGIC;
        m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_ARVALID : OUT STD_LOGIC;
        m_axi_mem_ARREADY : IN STD_LOGIC;
        m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RVALID : IN STD_LOGIC;
        m_axi_mem_RREADY : OUT STD_LOGIC;
        m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_mem_RLAST : IN STD_LOGIC;
        m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_BVALID : IN STD_LOGIC;
        m_axi_mem_BREADY : OUT STD_LOGIC;
        m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        mem1 : IN STD_LOGIC_VECTOR (63 downto 0);
        bA : IN STD_LOGIC_VECTOR (15 downto 0);
        bB : IN STD_LOGIC_VECTOR (15 downto 0);
        bAB : IN STD_LOGIC_VECTOR (15 downto 0);
        N : IN STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component acti_proc_activ IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_mem_AWVALID : OUT STD_LOGIC;
        m_axi_mem_AWREADY : IN STD_LOGIC;
        m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_WVALID : OUT STD_LOGIC;
        m_axi_mem_WREADY : IN STD_LOGIC;
        m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mem_WLAST : OUT STD_LOGIC;
        m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_ARVALID : OUT STD_LOGIC;
        m_axi_mem_ARREADY : IN STD_LOGIC;
        m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RVALID : IN STD_LOGIC;
        m_axi_mem_RREADY : OUT STD_LOGIC;
        m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        m_axi_mem_RLAST : IN STD_LOGIC;
        m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_BVALID : IN STD_LOGIC;
        m_axi_mem_BREADY : OUT STD_LOGIC;
        m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        A : IN STD_LOGIC_VECTOR (63 downto 0);
        ro : IN STD_LOGIC_VECTOR (15 downto 0);
        wo : IN STD_LOGIC_VECTOR (15 downto 0);
        N : IN STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component acti_proc_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        insts : OUT STD_LOGIC_VECTOR (63 downto 0);
        mem_offset : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component acti_proc_imem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component acti_proc_mem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (511 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (63 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    grp_matmul_fu_152 : component acti_proc_matmul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_matmul_fu_152_ap_start,
        ap_done => grp_matmul_fu_152_ap_done,
        ap_idle => grp_matmul_fu_152_ap_idle,
        ap_ready => grp_matmul_fu_152_ap_ready,
        m_axi_mem_AWVALID => grp_matmul_fu_152_m_axi_mem_AWVALID,
        m_axi_mem_AWREADY => mem_AWREADY,
        m_axi_mem_AWADDR => grp_matmul_fu_152_m_axi_mem_AWADDR,
        m_axi_mem_AWID => grp_matmul_fu_152_m_axi_mem_AWID,
        m_axi_mem_AWLEN => grp_matmul_fu_152_m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE => grp_matmul_fu_152_m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST => grp_matmul_fu_152_m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK => grp_matmul_fu_152_m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE => grp_matmul_fu_152_m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT => grp_matmul_fu_152_m_axi_mem_AWPROT,
        m_axi_mem_AWQOS => grp_matmul_fu_152_m_axi_mem_AWQOS,
        m_axi_mem_AWREGION => grp_matmul_fu_152_m_axi_mem_AWREGION,
        m_axi_mem_AWUSER => grp_matmul_fu_152_m_axi_mem_AWUSER,
        m_axi_mem_WVALID => grp_matmul_fu_152_m_axi_mem_WVALID,
        m_axi_mem_WREADY => mem_WREADY,
        m_axi_mem_WDATA => grp_matmul_fu_152_m_axi_mem_WDATA,
        m_axi_mem_WSTRB => grp_matmul_fu_152_m_axi_mem_WSTRB,
        m_axi_mem_WLAST => grp_matmul_fu_152_m_axi_mem_WLAST,
        m_axi_mem_WID => grp_matmul_fu_152_m_axi_mem_WID,
        m_axi_mem_WUSER => grp_matmul_fu_152_m_axi_mem_WUSER,
        m_axi_mem_ARVALID => grp_matmul_fu_152_m_axi_mem_ARVALID,
        m_axi_mem_ARREADY => mem_ARREADY,
        m_axi_mem_ARADDR => grp_matmul_fu_152_m_axi_mem_ARADDR,
        m_axi_mem_ARID => grp_matmul_fu_152_m_axi_mem_ARID,
        m_axi_mem_ARLEN => grp_matmul_fu_152_m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE => grp_matmul_fu_152_m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST => grp_matmul_fu_152_m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK => grp_matmul_fu_152_m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE => grp_matmul_fu_152_m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT => grp_matmul_fu_152_m_axi_mem_ARPROT,
        m_axi_mem_ARQOS => grp_matmul_fu_152_m_axi_mem_ARQOS,
        m_axi_mem_ARREGION => grp_matmul_fu_152_m_axi_mem_ARREGION,
        m_axi_mem_ARUSER => grp_matmul_fu_152_m_axi_mem_ARUSER,
        m_axi_mem_RVALID => mem_RVALID,
        m_axi_mem_RREADY => grp_matmul_fu_152_m_axi_mem_RREADY,
        m_axi_mem_RDATA => mem_RDATA,
        m_axi_mem_RLAST => ap_const_logic_0,
        m_axi_mem_RID => ap_const_lv1_0,
        m_axi_mem_RFIFONUM => mem_RFIFONUM,
        m_axi_mem_RUSER => ap_const_lv1_0,
        m_axi_mem_RRESP => ap_const_lv2_0,
        m_axi_mem_BVALID => mem_BVALID,
        m_axi_mem_BREADY => grp_matmul_fu_152_m_axi_mem_BREADY,
        m_axi_mem_BRESP => ap_const_lv2_0,
        m_axi_mem_BID => ap_const_lv1_0,
        m_axi_mem_BUSER => ap_const_lv1_0,
        mem1 => mem_offset_read_reg_295,
        bA => bA_reg_358,
        bB => bB_reg_364,
        bAB => bAB_reg_370,
        N => N_reg_352);

    grp_activ_fu_163 : component acti_proc_activ
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_activ_fu_163_ap_start,
        ap_done => grp_activ_fu_163_ap_done,
        ap_idle => grp_activ_fu_163_ap_idle,
        ap_ready => grp_activ_fu_163_ap_ready,
        m_axi_mem_AWVALID => grp_activ_fu_163_m_axi_mem_AWVALID,
        m_axi_mem_AWREADY => mem_AWREADY,
        m_axi_mem_AWADDR => grp_activ_fu_163_m_axi_mem_AWADDR,
        m_axi_mem_AWID => grp_activ_fu_163_m_axi_mem_AWID,
        m_axi_mem_AWLEN => grp_activ_fu_163_m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE => grp_activ_fu_163_m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST => grp_activ_fu_163_m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK => grp_activ_fu_163_m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE => grp_activ_fu_163_m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT => grp_activ_fu_163_m_axi_mem_AWPROT,
        m_axi_mem_AWQOS => grp_activ_fu_163_m_axi_mem_AWQOS,
        m_axi_mem_AWREGION => grp_activ_fu_163_m_axi_mem_AWREGION,
        m_axi_mem_AWUSER => grp_activ_fu_163_m_axi_mem_AWUSER,
        m_axi_mem_WVALID => grp_activ_fu_163_m_axi_mem_WVALID,
        m_axi_mem_WREADY => mem_WREADY,
        m_axi_mem_WDATA => grp_activ_fu_163_m_axi_mem_WDATA,
        m_axi_mem_WSTRB => grp_activ_fu_163_m_axi_mem_WSTRB,
        m_axi_mem_WLAST => grp_activ_fu_163_m_axi_mem_WLAST,
        m_axi_mem_WID => grp_activ_fu_163_m_axi_mem_WID,
        m_axi_mem_WUSER => grp_activ_fu_163_m_axi_mem_WUSER,
        m_axi_mem_ARVALID => grp_activ_fu_163_m_axi_mem_ARVALID,
        m_axi_mem_ARREADY => mem_ARREADY,
        m_axi_mem_ARADDR => grp_activ_fu_163_m_axi_mem_ARADDR,
        m_axi_mem_ARID => grp_activ_fu_163_m_axi_mem_ARID,
        m_axi_mem_ARLEN => grp_activ_fu_163_m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE => grp_activ_fu_163_m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST => grp_activ_fu_163_m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK => grp_activ_fu_163_m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE => grp_activ_fu_163_m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT => grp_activ_fu_163_m_axi_mem_ARPROT,
        m_axi_mem_ARQOS => grp_activ_fu_163_m_axi_mem_ARQOS,
        m_axi_mem_ARREGION => grp_activ_fu_163_m_axi_mem_ARREGION,
        m_axi_mem_ARUSER => grp_activ_fu_163_m_axi_mem_ARUSER,
        m_axi_mem_RVALID => mem_RVALID,
        m_axi_mem_RREADY => grp_activ_fu_163_m_axi_mem_RREADY,
        m_axi_mem_RDATA => mem_RDATA,
        m_axi_mem_RLAST => ap_const_logic_0,
        m_axi_mem_RID => ap_const_lv1_0,
        m_axi_mem_RFIFONUM => mem_RFIFONUM,
        m_axi_mem_RUSER => ap_const_lv1_0,
        m_axi_mem_RRESP => ap_const_lv2_0,
        m_axi_mem_BVALID => mem_BVALID,
        m_axi_mem_BREADY => grp_activ_fu_163_m_axi_mem_BREADY,
        m_axi_mem_BRESP => ap_const_lv2_0,
        m_axi_mem_BID => ap_const_lv1_0,
        m_axi_mem_BUSER => ap_const_lv1_0,
        A => mem_offset_read_reg_295,
        ro => bA_reg_358,
        wo => bB_reg_364,
        N => N_reg_352);

    control_s_axi_U : component acti_proc_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        insts => insts,
        mem_offset => mem_offset,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    imem_m_axi_U : component acti_proc_imem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_IMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_IMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_IMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_IMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_IMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_IMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_IMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_IMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_IMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_IMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_IMEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 64,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_imem_AWVALID,
        AWREADY => m_axi_imem_AWREADY,
        AWADDR => m_axi_imem_AWADDR,
        AWID => m_axi_imem_AWID,
        AWLEN => m_axi_imem_AWLEN,
        AWSIZE => m_axi_imem_AWSIZE,
        AWBURST => m_axi_imem_AWBURST,
        AWLOCK => m_axi_imem_AWLOCK,
        AWCACHE => m_axi_imem_AWCACHE,
        AWPROT => m_axi_imem_AWPROT,
        AWQOS => m_axi_imem_AWQOS,
        AWREGION => m_axi_imem_AWREGION,
        AWUSER => m_axi_imem_AWUSER,
        WVALID => m_axi_imem_WVALID,
        WREADY => m_axi_imem_WREADY,
        WDATA => m_axi_imem_WDATA,
        WSTRB => m_axi_imem_WSTRB,
        WLAST => m_axi_imem_WLAST,
        WID => m_axi_imem_WID,
        WUSER => m_axi_imem_WUSER,
        ARVALID => m_axi_imem_ARVALID,
        ARREADY => m_axi_imem_ARREADY,
        ARADDR => m_axi_imem_ARADDR,
        ARID => m_axi_imem_ARID,
        ARLEN => m_axi_imem_ARLEN,
        ARSIZE => m_axi_imem_ARSIZE,
        ARBURST => m_axi_imem_ARBURST,
        ARLOCK => m_axi_imem_ARLOCK,
        ARCACHE => m_axi_imem_ARCACHE,
        ARPROT => m_axi_imem_ARPROT,
        ARQOS => m_axi_imem_ARQOS,
        ARREGION => m_axi_imem_ARREGION,
        ARUSER => m_axi_imem_ARUSER,
        RVALID => m_axi_imem_RVALID,
        RREADY => m_axi_imem_RREADY,
        RDATA => m_axi_imem_RDATA,
        RLAST => m_axi_imem_RLAST,
        RID => m_axi_imem_RID,
        RUSER => m_axi_imem_RUSER,
        RRESP => m_axi_imem_RRESP,
        BVALID => m_axi_imem_BVALID,
        BREADY => m_axi_imem_BREADY,
        BRESP => m_axi_imem_BRESP,
        BID => m_axi_imem_BID,
        BUSER => m_axi_imem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => imem_ARVALID,
        I_ARREADY => imem_ARREADY,
        I_ARADDR => sext_ln87_fu_220_p1,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => imem_RVALID,
        I_RREADY => imem_RREADY,
        I_RDATA => imem_RDATA,
        I_RFIFONUM => imem_RFIFONUM,
        I_AWVALID => imem_AWVALID,
        I_AWREADY => imem_AWREADY,
        I_AWADDR => imem_addr_reg_323,
        I_AWLEN => ap_const_lv32_1,
        I_WVALID => imem_WVALID,
        I_WREADY => imem_WREADY,
        I_WDATA => zext_ln85_reg_340,
        I_WSTRB => ap_const_lv8_FF,
        I_BVALID => imem_BVALID,
        I_BREADY => imem_BREADY);

    mem_m_axi_U : component acti_proc_mem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_MEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_MEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_MEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_MEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_MEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_MEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_MEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_MEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_MEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_MEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_MEM_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 512,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_mem_AWVALID,
        AWREADY => m_axi_mem_AWREADY,
        AWADDR => m_axi_mem_AWADDR,
        AWID => m_axi_mem_AWID,
        AWLEN => m_axi_mem_AWLEN,
        AWSIZE => m_axi_mem_AWSIZE,
        AWBURST => m_axi_mem_AWBURST,
        AWLOCK => m_axi_mem_AWLOCK,
        AWCACHE => m_axi_mem_AWCACHE,
        AWPROT => m_axi_mem_AWPROT,
        AWQOS => m_axi_mem_AWQOS,
        AWREGION => m_axi_mem_AWREGION,
        AWUSER => m_axi_mem_AWUSER,
        WVALID => m_axi_mem_WVALID,
        WREADY => m_axi_mem_WREADY,
        WDATA => m_axi_mem_WDATA,
        WSTRB => m_axi_mem_WSTRB,
        WLAST => m_axi_mem_WLAST,
        WID => m_axi_mem_WID,
        WUSER => m_axi_mem_WUSER,
        ARVALID => m_axi_mem_ARVALID,
        ARREADY => m_axi_mem_ARREADY,
        ARADDR => m_axi_mem_ARADDR,
        ARID => m_axi_mem_ARID,
        ARLEN => m_axi_mem_ARLEN,
        ARSIZE => m_axi_mem_ARSIZE,
        ARBURST => m_axi_mem_ARBURST,
        ARLOCK => m_axi_mem_ARLOCK,
        ARCACHE => m_axi_mem_ARCACHE,
        ARPROT => m_axi_mem_ARPROT,
        ARQOS => m_axi_mem_ARQOS,
        ARREGION => m_axi_mem_ARREGION,
        ARUSER => m_axi_mem_ARUSER,
        RVALID => m_axi_mem_RVALID,
        RREADY => m_axi_mem_RREADY,
        RDATA => m_axi_mem_RDATA,
        RLAST => m_axi_mem_RLAST,
        RID => m_axi_mem_RID,
        RUSER => m_axi_mem_RUSER,
        RRESP => m_axi_mem_RRESP,
        BVALID => m_axi_mem_BVALID,
        BREADY => m_axi_mem_BREADY,
        BRESP => m_axi_mem_BRESP,
        BID => m_axi_mem_BID,
        BUSER => m_axi_mem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => mem_ARVALID,
        I_ARREADY => mem_ARREADY,
        I_ARADDR => mem_ARADDR,
        I_ARLEN => mem_ARLEN,
        I_RVALID => mem_RVALID,
        I_RREADY => mem_RREADY,
        I_RDATA => mem_RDATA,
        I_RFIFONUM => mem_RFIFONUM,
        I_AWVALID => mem_AWVALID,
        I_AWREADY => mem_AWREADY,
        I_AWADDR => mem_AWADDR,
        I_AWLEN => mem_AWLEN,
        I_WVALID => mem_WVALID,
        I_WREADY => mem_WREADY,
        I_WDATA => mem_WDATA,
        I_WSTRB => mem_WSTRB,
        I_BVALID => mem_BVALID,
        I_BREADY => mem_BREADY);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_activ_fu_163_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_activ_fu_163_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0))) then 
                    grp_activ_fu_163_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_activ_fu_163_ap_ready = ap_const_logic_1)) then 
                    grp_activ_fu_163_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matmul_fu_152_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_matmul_fu_152_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0))) then 
                    grp_matmul_fu_152_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matmul_fu_152_ap_ready = ap_const_logic_1)) then 
                    grp_matmul_fu_152_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    pc_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                pc_fu_114 <= ap_const_lv10_0;
            elsif ((not(((imem_AWREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state13_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                pc_fu_114 <= add_ln85_reg_313;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                N_reg_352 <= abc_reg_330(60 downto 48);
                bAB_reg_370 <= bAB_fu_280_p1;
                bA_reg_358 <= abc_reg_330(47 downto 32);
                bB_reg_364 <= abc_reg_330(31 downto 16);
                tmp2_reg_348 <= abc_reg_330(63 downto 61);
                    zext_ln85_reg_340(9 downto 0) <= zext_ln85_fu_230_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                abc_reg_330 <= imem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln85_reg_313 <= add_ln85_fu_187_p2;
                icmp_ln85_reg_309 <= icmp_ln85_fu_181_p2;
                trunc_ln_reg_318 <= add_ln87_fu_205_p2(63 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                imem_addr_reg_323 <= sext_ln87_fu_220_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                insts_read_reg_301 <= insts;
                mem_offset_read_reg_295 <= mem_offset;
            end if;
        end if;
    end process;
    zext_ln85_reg_340(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state19, icmp_ln85_fu_181_p2, icmp_ln85_reg_309, ap_CS_fsm_state2, ap_CS_fsm_state12, imem_AWREADY, imem_WREADY, imem_ARREADY, imem_RVALID, imem_BVALID, icmp_ln88_fu_233_p2, ap_block_state13_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln85_fu_181_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((imem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((imem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and ((icmp_ln88_fu_233_p2 = ap_const_lv1_1) or (icmp_ln85_reg_309 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                if ((not(((imem_AWREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state13_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((imem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((imem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln85_fu_187_p2 <= std_logic_vector(unsigned(pc_fu_114) + unsigned(ap_const_lv10_1));
    add_ln87_fu_205_p2 <= std_logic_vector(unsigned(zext_ln87_fu_201_p1) + unsigned(insts_read_reg_301));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(imem_RVALID)
    begin
        if ((imem_RVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(imem_AWREADY, ap_block_state13_on_subcall_done)
    begin
        if (((imem_AWREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state13_on_subcall_done))) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state14_blk_assign_proc : process(imem_WREADY)
    begin
        if ((imem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state14_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state14_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;

    ap_ST_fsm_state19_blk_assign_proc : process(imem_BVALID)
    begin
        if ((imem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state19_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state19_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(imem_ARREADY)
    begin
        if ((imem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state13_on_subcall_done_assign_proc : process(tmp2_reg_348, grp_matmul_fu_152_ap_done, grp_activ_fu_163_ap_done)
    begin
                ap_block_state13_on_subcall_done <= (((grp_activ_fu_163_ap_done = ap_const_logic_0) and (tmp2_reg_348 = ap_const_lv3_1)) or ((grp_matmul_fu_152_ap_done = ap_const_logic_0) and (tmp2_reg_348 = ap_const_lv3_2)));
    end process;


    ap_done_assign_proc : process(icmp_ln85_reg_309, ap_CS_fsm_state12, icmp_ln88_fu_233_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and ((icmp_ln88_fu_233_p2 = ap_const_lv1_1) or (icmp_ln85_reg_309 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln85_reg_309, ap_CS_fsm_state12, icmp_ln88_fu_233_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and ((icmp_ln88_fu_233_p2 = ap_const_lv1_1) or (icmp_ln85_reg_309 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bAB_fu_280_p1 <= abc_reg_330(16 - 1 downto 0);
    grp_activ_fu_163_ap_start <= grp_activ_fu_163_ap_start_reg;
    grp_matmul_fu_152_ap_start <= grp_matmul_fu_152_ap_start_reg;
    icmp_ln85_fu_181_p2 <= "1" when (pc_fu_114 = ap_const_lv10_3E8) else "0";
    icmp_ln88_fu_233_p2 <= "1" when (abc_reg_330 = ap_const_lv64_0) else "0";

    imem_ARVALID_assign_proc : process(ap_CS_fsm_state3, imem_ARREADY)
    begin
        if (((imem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            imem_ARVALID <= ap_const_logic_1;
        else 
            imem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    imem_AWVALID_assign_proc : process(ap_CS_fsm_state13, imem_AWREADY, ap_block_state13_on_subcall_done)
    begin
        if ((not(((imem_AWREADY = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state13_on_subcall_done))) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            imem_AWVALID <= ap_const_logic_1;
        else 
            imem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    imem_BREADY_assign_proc : process(ap_CS_fsm_state19, imem_BVALID)
    begin
        if (((imem_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            imem_BREADY <= ap_const_logic_1;
        else 
            imem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    imem_RREADY_assign_proc : process(ap_CS_fsm_state11, imem_RVALID)
    begin
        if (((imem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            imem_RREADY <= ap_const_logic_1;
        else 
            imem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    imem_WVALID_assign_proc : process(ap_CS_fsm_state14, imem_WREADY)
    begin
        if (((imem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            imem_WVALID <= ap_const_logic_1;
        else 
            imem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    imem_blk_n_AR_assign_proc : process(m_axi_imem_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            imem_blk_n_AR <= m_axi_imem_ARREADY;
        else 
            imem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    imem_blk_n_AW_assign_proc : process(m_axi_imem_AWREADY, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            imem_blk_n_AW <= m_axi_imem_AWREADY;
        else 
            imem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    imem_blk_n_B_assign_proc : process(m_axi_imem_BVALID, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            imem_blk_n_B <= m_axi_imem_BVALID;
        else 
            imem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    imem_blk_n_R_assign_proc : process(m_axi_imem_RVALID, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            imem_blk_n_R <= m_axi_imem_RVALID;
        else 
            imem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    imem_blk_n_W_assign_proc : process(m_axi_imem_WREADY, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            imem_blk_n_W <= m_axi_imem_WREADY;
        else 
            imem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    mem_ARADDR_assign_proc : process(ap_CS_fsm_state13, icmp_ln85_reg_309, ap_CS_fsm_state12, tmp2_fu_238_p4, tmp2_reg_348, grp_matmul_fu_152_m_axi_mem_ARADDR, grp_activ_fu_163_m_axi_mem_ARADDR, icmp_ln88_fu_233_p2)
    begin
        if ((((tmp2_reg_348 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_ARADDR <= grp_activ_fu_163_m_axi_mem_ARADDR;
        elsif ((((tmp2_reg_348 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_ARADDR <= grp_matmul_fu_152_m_axi_mem_ARADDR;
        else 
            mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_ARLEN_assign_proc : process(ap_CS_fsm_state13, icmp_ln85_reg_309, ap_CS_fsm_state12, tmp2_fu_238_p4, tmp2_reg_348, grp_matmul_fu_152_m_axi_mem_ARLEN, grp_activ_fu_163_m_axi_mem_ARLEN, icmp_ln88_fu_233_p2)
    begin
        if ((((tmp2_reg_348 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_ARLEN <= grp_activ_fu_163_m_axi_mem_ARLEN;
        elsif ((((tmp2_reg_348 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_ARLEN <= grp_matmul_fu_152_m_axi_mem_ARLEN;
        else 
            mem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_ARVALID_assign_proc : process(ap_CS_fsm_state13, icmp_ln85_reg_309, ap_CS_fsm_state12, tmp2_fu_238_p4, tmp2_reg_348, grp_matmul_fu_152_m_axi_mem_ARVALID, grp_activ_fu_163_m_axi_mem_ARVALID, icmp_ln88_fu_233_p2)
    begin
        if ((((tmp2_reg_348 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_ARVALID <= grp_activ_fu_163_m_axi_mem_ARVALID;
        elsif ((((tmp2_reg_348 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_ARVALID <= grp_matmul_fu_152_m_axi_mem_ARVALID;
        else 
            mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_AWADDR_assign_proc : process(ap_CS_fsm_state13, icmp_ln85_reg_309, ap_CS_fsm_state12, tmp2_fu_238_p4, tmp2_reg_348, grp_matmul_fu_152_m_axi_mem_AWADDR, grp_activ_fu_163_m_axi_mem_AWADDR, icmp_ln88_fu_233_p2)
    begin
        if ((((tmp2_reg_348 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_AWADDR <= grp_activ_fu_163_m_axi_mem_AWADDR;
        elsif ((((tmp2_reg_348 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_AWADDR <= grp_matmul_fu_152_m_axi_mem_AWADDR;
        else 
            mem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_AWLEN_assign_proc : process(ap_CS_fsm_state13, icmp_ln85_reg_309, ap_CS_fsm_state12, tmp2_fu_238_p4, tmp2_reg_348, grp_matmul_fu_152_m_axi_mem_AWLEN, grp_activ_fu_163_m_axi_mem_AWLEN, icmp_ln88_fu_233_p2)
    begin
        if ((((tmp2_reg_348 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_AWLEN <= grp_activ_fu_163_m_axi_mem_AWLEN;
        elsif ((((tmp2_reg_348 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_AWLEN <= grp_matmul_fu_152_m_axi_mem_AWLEN;
        else 
            mem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_AWVALID_assign_proc : process(ap_CS_fsm_state13, icmp_ln85_reg_309, ap_CS_fsm_state12, tmp2_fu_238_p4, tmp2_reg_348, grp_matmul_fu_152_m_axi_mem_AWVALID, grp_activ_fu_163_m_axi_mem_AWVALID, icmp_ln88_fu_233_p2)
    begin
        if ((((tmp2_reg_348 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_AWVALID <= grp_activ_fu_163_m_axi_mem_AWVALID;
        elsif ((((tmp2_reg_348 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_AWVALID <= grp_matmul_fu_152_m_axi_mem_AWVALID;
        else 
            mem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem_BREADY_assign_proc : process(ap_CS_fsm_state13, icmp_ln85_reg_309, ap_CS_fsm_state12, tmp2_fu_238_p4, tmp2_reg_348, grp_matmul_fu_152_m_axi_mem_BREADY, grp_activ_fu_163_m_axi_mem_BREADY, icmp_ln88_fu_233_p2)
    begin
        if ((((tmp2_reg_348 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_BREADY <= grp_activ_fu_163_m_axi_mem_BREADY;
        elsif ((((tmp2_reg_348 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_BREADY <= grp_matmul_fu_152_m_axi_mem_BREADY;
        else 
            mem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_RREADY_assign_proc : process(ap_CS_fsm_state13, icmp_ln85_reg_309, ap_CS_fsm_state12, tmp2_fu_238_p4, tmp2_reg_348, grp_matmul_fu_152_m_axi_mem_RREADY, grp_activ_fu_163_m_axi_mem_RREADY, icmp_ln88_fu_233_p2)
    begin
        if ((((tmp2_reg_348 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_RREADY <= grp_activ_fu_163_m_axi_mem_RREADY;
        elsif ((((tmp2_reg_348 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_RREADY <= grp_matmul_fu_152_m_axi_mem_RREADY;
        else 
            mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    mem_WDATA_assign_proc : process(ap_CS_fsm_state13, icmp_ln85_reg_309, ap_CS_fsm_state12, tmp2_fu_238_p4, tmp2_reg_348, grp_matmul_fu_152_m_axi_mem_WDATA, grp_activ_fu_163_m_axi_mem_WDATA, icmp_ln88_fu_233_p2)
    begin
        if ((((tmp2_reg_348 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_WDATA <= grp_activ_fu_163_m_axi_mem_WDATA;
        elsif ((((tmp2_reg_348 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_WDATA <= grp_matmul_fu_152_m_axi_mem_WDATA;
        else 
            mem
        end if; 
    end process;


    mem_WSTRB_assign_proc : process(ap_CS_fsm_state13, icmp_ln85_reg_309, ap_CS_fsm_state12, tmp2_fu_238_p4, tmp2_reg_348, grp_matmul_fu_152_m_axi_mem_WSTRB, grp_activ_fu_163_m_axi_mem_WSTRB, icmp_ln88_fu_233_p2)
    begin
        if ((((tmp2_reg_348 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_WSTRB <= grp_activ_fu_163_m_axi_mem_WSTRB;
        elsif ((((tmp2_reg_348 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_WSTRB <= grp_matmul_fu_152_m_axi_mem_WSTRB;
        else 
            mem_WSTRB <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mem_WVALID_assign_proc : process(ap_CS_fsm_state13, icmp_ln85_reg_309, ap_CS_fsm_state12, tmp2_fu_238_p4, tmp2_reg_348, grp_matmul_fu_152_m_axi_mem_WVALID, grp_activ_fu_163_m_axi_mem_WVALID, icmp_ln88_fu_233_p2)
    begin
        if ((((tmp2_reg_348 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_WVALID <= grp_activ_fu_163_m_axi_mem_WVALID;
        elsif ((((tmp2_reg_348 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln88_fu_233_p2 = ap_const_lv1_0) and (tmp2_fu_238_p4 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state12) and (icmp_ln85_reg_309 = ap_const_lv1_0)))) then 
            mem_WVALID <= grp_matmul_fu_152_m_axi_mem_WVALID;
        else 
            mem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln87_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_reg_318),64));

    shl_ln_fu_193_p3 <= (pc_fu_114 & ap_const_lv3_0);
    tmp2_fu_238_p4 <= abc_reg_330(63 downto 61);
    zext_ln85_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pc_fu_114),64));
    zext_ln87_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_193_p3),64));
end behav;
