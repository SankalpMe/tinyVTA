// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module acti_proc_activ (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RFIFONUM,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        A,
        ro,
        wo,
        N
);

parameter    ap_ST_fsm_pp0_stage0 = 17'd1;
parameter    ap_ST_fsm_pp0_stage1 = 17'd2;
parameter    ap_ST_fsm_pp0_stage2 = 17'd4;
parameter    ap_ST_fsm_pp0_stage3 = 17'd8;
parameter    ap_ST_fsm_pp0_stage4 = 17'd16;
parameter    ap_ST_fsm_pp0_stage5 = 17'd32;
parameter    ap_ST_fsm_pp0_stage6 = 17'd64;
parameter    ap_ST_fsm_pp0_stage7 = 17'd128;
parameter    ap_ST_fsm_pp0_stage8 = 17'd256;
parameter    ap_ST_fsm_pp0_stage9 = 17'd512;
parameter    ap_ST_fsm_pp0_stage10 = 17'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 17'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 17'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 17'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 17'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 17'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [63:0] m_axi_mem_AWADDR;
output  [0:0] m_axi_mem_AWID;
output  [31:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [0:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [511:0] m_axi_mem_WDATA;
output  [63:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [0:0] m_axi_mem_WID;
output  [0:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [63:0] m_axi_mem_ARADDR;
output  [0:0] m_axi_mem_ARID;
output  [31:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [0:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [511:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [0:0] m_axi_mem_RID;
input  [8:0] m_axi_mem_RFIFONUM;
input  [0:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [0:0] m_axi_mem_BID;
input  [0:0] m_axi_mem_BUSER;
input  [63:0] A;
input  [15:0] ro;
input  [15:0] wo;
input  [12:0] N;

reg ap_idle;
reg m_axi_mem_AWVALID;
reg m_axi_mem_WVALID;
reg m_axi_mem_ARVALID;
reg m_axi_mem_RREADY;
reg m_axi_mem_BREADY;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state18_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln5_fu_390_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_block_pp0_stage16_subdone;
reg    mem_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln5_reg_1491;
reg    mem_blk_n_R;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
reg    mem_blk_n_AW;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
reg    mem_blk_n_W;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
reg    mem_blk_n_B;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [57:0] trunc_ln8_s_reg_1495;
reg   [57:0] trunc_ln6_reg_1500;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage1_11001;
wire   [31:0] trunc_ln8_fu_489_p1;
reg   [31:0] trunc_ln8_reg_1511;
reg    ap_block_state10_pp0_stage9_iter0;
reg    ap_block_pp0_stage9_11001;
reg   [31:0] trunc_ln8_1_reg_1517;
reg   [31:0] trunc_ln8_2_reg_1523;
reg   [31:0] trunc_ln8_3_reg_1529;
reg   [31:0] trunc_ln8_4_reg_1535;
reg   [31:0] trunc_ln8_5_reg_1541;
reg   [31:0] trunc_ln8_6_reg_1547;
reg   [31:0] trunc_ln8_7_reg_1553;
reg   [31:0] trunc_ln8_8_reg_1559;
reg   [31:0] trunc_ln8_9_reg_1565;
reg   [31:0] trunc_ln8_10_reg_1571;
reg   [31:0] trunc_ln8_11_reg_1577;
reg   [31:0] trunc_ln8_12_reg_1583;
reg   [31:0] trunc_ln8_13_reg_1589;
reg   [31:0] trunc_ln8_14_reg_1595;
reg   [31:0] trunc_ln8_15_reg_1601;
reg   [7:0] tmp_reg_1607;
wire   [22:0] trunc_ln12_fu_653_p1;
reg   [22:0] trunc_ln12_reg_1612;
reg   [7:0] tmp_2_reg_1617;
reg   [22:0] trunc_ln12_1_reg_1622;
reg   [7:0] tmp_4_reg_1627;
reg   [22:0] trunc_ln12_2_reg_1632;
reg   [7:0] tmp_6_reg_1637;
reg   [22:0] trunc_ln12_3_reg_1642;
reg   [7:0] tmp_8_reg_1647;
reg   [22:0] trunc_ln12_4_reg_1652;
reg   [7:0] tmp_10_reg_1657;
reg   [22:0] trunc_ln12_5_reg_1662;
reg   [7:0] tmp_12_reg_1667;
reg   [22:0] trunc_ln12_6_reg_1672;
reg   [7:0] tmp_14_reg_1677;
reg   [22:0] trunc_ln12_7_reg_1682;
reg   [7:0] tmp_16_reg_1687;
reg   [22:0] trunc_ln12_8_reg_1692;
reg   [7:0] tmp_18_reg_1697;
reg   [22:0] trunc_ln12_9_reg_1702;
reg   [7:0] tmp_20_reg_1707;
reg   [22:0] trunc_ln12_s_reg_1712;
reg   [7:0] tmp_22_reg_1717;
reg   [22:0] trunc_ln12_10_reg_1722;
reg   [7:0] tmp_24_reg_1727;
reg   [22:0] trunc_ln12_11_reg_1732;
reg   [7:0] tmp_26_reg_1737;
reg   [22:0] trunc_ln12_12_reg_1742;
reg   [7:0] tmp_28_reg_1747;
reg   [22:0] trunc_ln12_13_reg_1752;
reg   [7:0] tmp_30_reg_1757;
reg   [22:0] trunc_ln12_14_reg_1762;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10_11001;
wire   [0:0] icmp_ln12_fu_961_p2;
reg   [0:0] icmp_ln12_reg_1772;
wire   [0:0] icmp_ln12_1_fu_966_p2;
reg   [0:0] icmp_ln12_1_reg_1777;
wire   [0:0] icmp_ln12_2_fu_975_p2;
reg   [0:0] icmp_ln12_2_reg_1787;
wire   [0:0] icmp_ln12_3_fu_980_p2;
reg   [0:0] icmp_ln12_3_reg_1792;
wire   [0:0] icmp_ln12_4_fu_989_p2;
reg   [0:0] icmp_ln12_4_reg_1802;
wire   [0:0] icmp_ln12_5_fu_994_p2;
reg   [0:0] icmp_ln12_5_reg_1807;
wire   [0:0] icmp_ln12_6_fu_1003_p2;
reg   [0:0] icmp_ln12_6_reg_1817;
wire   [0:0] icmp_ln12_7_fu_1008_p2;
reg   [0:0] icmp_ln12_7_reg_1822;
wire   [0:0] icmp_ln12_8_fu_1017_p2;
reg   [0:0] icmp_ln12_8_reg_1832;
wire   [0:0] icmp_ln12_9_fu_1022_p2;
reg   [0:0] icmp_ln12_9_reg_1837;
wire   [0:0] icmp_ln12_10_fu_1031_p2;
reg   [0:0] icmp_ln12_10_reg_1847;
wire   [0:0] icmp_ln12_11_fu_1036_p2;
reg   [0:0] icmp_ln12_11_reg_1852;
wire   [0:0] icmp_ln12_12_fu_1045_p2;
reg   [0:0] icmp_ln12_12_reg_1862;
wire   [0:0] icmp_ln12_13_fu_1050_p2;
reg   [0:0] icmp_ln12_13_reg_1867;
wire   [0:0] icmp_ln12_14_fu_1059_p2;
reg   [0:0] icmp_ln12_14_reg_1877;
wire   [0:0] icmp_ln12_15_fu_1064_p2;
reg   [0:0] icmp_ln12_15_reg_1882;
wire   [0:0] icmp_ln12_16_fu_1073_p2;
reg   [0:0] icmp_ln12_16_reg_1892;
wire   [0:0] icmp_ln12_17_fu_1078_p2;
reg   [0:0] icmp_ln12_17_reg_1897;
wire   [0:0] icmp_ln12_18_fu_1087_p2;
reg   [0:0] icmp_ln12_18_reg_1907;
wire   [0:0] icmp_ln12_19_fu_1092_p2;
reg   [0:0] icmp_ln12_19_reg_1912;
wire   [0:0] icmp_ln12_20_fu_1101_p2;
reg   [0:0] icmp_ln12_20_reg_1922;
wire   [0:0] icmp_ln12_21_fu_1106_p2;
reg   [0:0] icmp_ln12_21_reg_1927;
wire   [0:0] icmp_ln12_22_fu_1115_p2;
reg   [0:0] icmp_ln12_22_reg_1937;
wire   [0:0] icmp_ln12_23_fu_1120_p2;
reg   [0:0] icmp_ln12_23_reg_1942;
wire   [0:0] icmp_ln12_24_fu_1129_p2;
reg   [0:0] icmp_ln12_24_reg_1952;
wire   [0:0] icmp_ln12_25_fu_1134_p2;
reg   [0:0] icmp_ln12_25_reg_1957;
wire   [0:0] icmp_ln12_26_fu_1143_p2;
reg   [0:0] icmp_ln12_26_reg_1967;
wire   [0:0] icmp_ln12_27_fu_1148_p2;
reg   [0:0] icmp_ln12_27_reg_1972;
wire   [0:0] icmp_ln12_28_fu_1157_p2;
reg   [0:0] icmp_ln12_28_reg_1982;
wire   [0:0] icmp_ln12_29_fu_1162_p2;
reg   [0:0] icmp_ln12_29_reg_1987;
wire   [0:0] icmp_ln12_30_fu_1171_p2;
reg   [0:0] icmp_ln12_30_reg_1997;
wire   [0:0] icmp_ln12_31_fu_1176_p2;
reg   [0:0] icmp_ln12_31_reg_2002;
wire   [31:0] select_ln12_fu_1191_p3;
reg   [31:0] select_ln12_reg_2007;
reg    ap_block_state12_io;
reg    ap_block_pp0_stage11_11001;
wire   [31:0] select_ln12_1_fu_1208_p3;
reg   [31:0] select_ln12_1_reg_2012;
wire   [31:0] select_ln12_2_fu_1225_p3;
reg   [31:0] select_ln12_2_reg_2017;
wire   [31:0] select_ln12_3_fu_1242_p3;
reg   [31:0] select_ln12_3_reg_2022;
wire   [31:0] select_ln12_4_fu_1259_p3;
reg   [31:0] select_ln12_4_reg_2027;
wire   [31:0] select_ln12_5_fu_1276_p3;
reg   [31:0] select_ln12_5_reg_2032;
wire   [31:0] select_ln12_6_fu_1293_p3;
reg   [31:0] select_ln12_6_reg_2037;
wire   [31:0] select_ln12_7_fu_1310_p3;
reg   [31:0] select_ln12_7_reg_2042;
wire   [31:0] select_ln12_8_fu_1327_p3;
reg   [31:0] select_ln12_8_reg_2047;
wire   [31:0] select_ln12_9_fu_1344_p3;
reg   [31:0] select_ln12_9_reg_2052;
wire   [31:0] select_ln12_10_fu_1361_p3;
reg   [31:0] select_ln12_10_reg_2057;
wire   [31:0] select_ln12_11_fu_1378_p3;
reg   [31:0] select_ln12_11_reg_2062;
wire   [31:0] select_ln12_12_fu_1395_p3;
reg   [31:0] select_ln12_12_reg_2067;
wire   [31:0] select_ln12_13_fu_1412_p3;
reg   [31:0] select_ln12_13_reg_2072;
wire   [31:0] select_ln12_14_fu_1429_p3;
reg   [31:0] select_ln12_14_reg_2077;
wire   [31:0] select_ln12_15_fu_1446_p3;
reg   [31:0] select_ln12_15_reg_2082;
reg    ap_enable_reg_pp0_iter0_reg;
wire  signed [63:0] sext_ln8_fu_479_p1;
wire  signed [63:0] sext_ln15_fu_1453_p1;
reg    ap_block_state13_io;
reg    ap_block_pp0_stage12_11001;
wire    ap_block_pp0_stage12_01001;
reg   [12:0] i_fu_238;
wire   [12:0] add_ln5_fu_396_p2;
wire    ap_loop_init;
reg   [12:0] ap_sig_allocacmp_i_3;
wire   [31:0] grp_fu_294_p0;
wire    ap_block_pp0_stage10;
wire   [31:0] grp_fu_299_p0;
wire   [31:0] grp_fu_304_p0;
wire   [31:0] grp_fu_309_p0;
wire   [31:0] grp_fu_314_p0;
wire   [31:0] grp_fu_319_p0;
wire   [31:0] grp_fu_324_p0;
wire   [31:0] grp_fu_329_p0;
wire   [31:0] grp_fu_334_p0;
wire   [31:0] grp_fu_339_p0;
wire   [31:0] grp_fu_344_p0;
wire   [31:0] grp_fu_349_p0;
wire   [31:0] grp_fu_354_p0;
wire   [31:0] grp_fu_359_p0;
wire   [31:0] grp_fu_364_p0;
wire   [31:0] grp_fu_369_p0;
wire   [16:0] zext_ln8_fu_402_p1;
wire   [16:0] zext_ln15_fu_374_p1;
wire   [16:0] add_ln8_fu_406_p2;
wire   [22:0] shl_ln8_fu_412_p3;
wire   [63:0] zext_ln8_1_fu_420_p1;
wire   [63:0] add_ln8_1_fu_424_p2;
wire   [16:0] wo_cast_fu_378_p1;
wire   [16:0] add_ln15_fu_440_p2;
wire   [22:0] shl_ln_fu_446_p3;
wire   [63:0] zext_ln15_1_fu_454_p1;
wire   [63:0] add_ln15_1_fu_458_p2;
wire   [0:0] or_ln12_fu_1181_p2;
wire   [0:0] grp_fu_294_p2;
wire   [0:0] and_ln12_fu_1185_p2;
wire   [0:0] or_ln12_1_fu_1198_p2;
wire   [0:0] grp_fu_299_p2;
wire   [0:0] and_ln12_1_fu_1202_p2;
wire   [0:0] or_ln12_2_fu_1215_p2;
wire   [0:0] grp_fu_304_p2;
wire   [0:0] and_ln12_2_fu_1219_p2;
wire   [0:0] or_ln12_3_fu_1232_p2;
wire   [0:0] grp_fu_309_p2;
wire   [0:0] and_ln12_3_fu_1236_p2;
wire   [0:0] or_ln12_4_fu_1249_p2;
wire   [0:0] grp_fu_314_p2;
wire   [0:0] and_ln12_4_fu_1253_p2;
wire   [0:0] or_ln12_5_fu_1266_p2;
wire   [0:0] grp_fu_319_p2;
wire   [0:0] and_ln12_5_fu_1270_p2;
wire   [0:0] or_ln12_6_fu_1283_p2;
wire   [0:0] grp_fu_324_p2;
wire   [0:0] and_ln12_6_fu_1287_p2;
wire   [0:0] or_ln12_7_fu_1300_p2;
wire   [0:0] grp_fu_329_p2;
wire   [0:0] and_ln12_7_fu_1304_p2;
wire   [0:0] or_ln12_8_fu_1317_p2;
wire   [0:0] grp_fu_334_p2;
wire   [0:0] and_ln12_8_fu_1321_p2;
wire   [0:0] or_ln12_9_fu_1334_p2;
wire   [0:0] grp_fu_339_p2;
wire   [0:0] and_ln12_9_fu_1338_p2;
wire   [0:0] or_ln12_10_fu_1351_p2;
wire   [0:0] grp_fu_344_p2;
wire   [0:0] and_ln12_10_fu_1355_p2;
wire   [0:0] or_ln12_11_fu_1368_p2;
wire   [0:0] grp_fu_349_p2;
wire   [0:0] and_ln12_11_fu_1372_p2;
wire   [0:0] or_ln12_12_fu_1385_p2;
wire   [0:0] grp_fu_354_p2;
wire   [0:0] and_ln12_12_fu_1389_p2;
wire   [0:0] or_ln12_13_fu_1402_p2;
wire   [0:0] grp_fu_359_p2;
wire   [0:0] and_ln12_13_fu_1406_p2;
wire   [0:0] or_ln12_14_fu_1419_p2;
wire   [0:0] grp_fu_364_p2;
wire   [0:0] and_ln12_14_fu_1423_p2;
wire   [0:0] or_ln12_15_fu_1436_p2;
wire   [0:0] grp_fu_369_p2;
wire   [0:0] and_ln12_15_fu_1440_p2;
reg    grp_fu_294_ce;
wire    ap_block_pp0_stage10_00001;
reg    grp_fu_299_ce;
reg    grp_fu_304_ce;
reg    grp_fu_309_ce;
reg    grp_fu_314_ce;
reg    grp_fu_319_ce;
reg    grp_fu_324_ce;
reg    grp_fu_329_ce;
reg    grp_fu_334_ce;
reg    grp_fu_339_ce;
reg    grp_fu_344_ce;
reg    grp_fu_349_ce;
reg    grp_fu_354_ce;
reg    grp_fu_359_ce;
reg    grp_fu_364_ce;
reg    grp_fu_369_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [16:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
reg    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
reg    ap_block_pp0_stage11_subdone;
reg    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_pp0_stage15_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 i_fu_238 = 13'd0;
#0 ap_done_reg = 1'b0;
end

acti_proc_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1429(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_294_p0),
    .din1(32'd0),
    .ce(grp_fu_294_ce),
    .opcode(5'd2),
    .dout(grp_fu_294_p2)
);

acti_proc_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1430(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_299_p0),
    .din1(32'd0),
    .ce(grp_fu_299_ce),
    .opcode(5'd2),
    .dout(grp_fu_299_p2)
);

acti_proc_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1431(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_304_p0),
    .din1(32'd0),
    .ce(grp_fu_304_ce),
    .opcode(5'd2),
    .dout(grp_fu_304_p2)
);

acti_proc_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1432(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_309_p0),
    .din1(32'd0),
    .ce(grp_fu_309_ce),
    .opcode(5'd2),
    .dout(grp_fu_309_p2)
);

acti_proc_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1433(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_314_p0),
    .din1(32'd0),
    .ce(grp_fu_314_ce),
    .opcode(5'd2),
    .dout(grp_fu_314_p2)
);

acti_proc_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1434(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_319_p0),
    .din1(32'd0),
    .ce(grp_fu_319_ce),
    .opcode(5'd2),
    .dout(grp_fu_319_p2)
);

acti_proc_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1435(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_324_p0),
    .din1(32'd0),
    .ce(grp_fu_324_ce),
    .opcode(5'd2),
    .dout(grp_fu_324_p2)
);

acti_proc_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1436(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_329_p0),
    .din1(32'd0),
    .ce(grp_fu_329_ce),
    .opcode(5'd2),
    .dout(grp_fu_329_p2)
);

acti_proc_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1437(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_334_p0),
    .din1(32'd0),
    .ce(grp_fu_334_ce),
    .opcode(5'd2),
    .dout(grp_fu_334_p2)
);

acti_proc_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1438(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_339_p0),
    .din1(32'd0),
    .ce(grp_fu_339_ce),
    .opcode(5'd2),
    .dout(grp_fu_339_p2)
);

acti_proc_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1439(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_344_p0),
    .din1(32'd0),
    .ce(grp_fu_344_ce),
    .opcode(5'd2),
    .dout(grp_fu_344_p2)
);

acti_proc_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1440(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_349_p0),
    .din1(32'd0),
    .ce(grp_fu_349_ce),
    .opcode(5'd2),
    .dout(grp_fu_349_p2)
);

acti_proc_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1441(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_354_p0),
    .din1(32'd0),
    .ce(grp_fu_354_ce),
    .opcode(5'd2),
    .dout(grp_fu_354_p2)
);

acti_proc_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1442(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_359_p0),
    .din1(32'd0),
    .ce(grp_fu_359_ce),
    .opcode(5'd2),
    .dout(grp_fu_359_p2)
);

acti_proc_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1443(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_364_p0),
    .din1(32'd0),
    .ce(grp_fu_364_ce),
    .opcode(5'd2),
    .dout(grp_fu_364_p2)
);

acti_proc_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U1444(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_369_p0),
    .din1(32'd0),
    .ce(grp_fu_369_ce),
    .opcode(5'd2),
    .dout(grp_fu_369_p2)
);

acti_proc_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln5_fu_390_p2 == 1'd0))) begin
            i_fu_238 <= add_ln5_fu_396_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_238 <= 13'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001))) begin
        icmp_ln12_10_reg_1847 <= icmp_ln12_10_fu_1031_p2;
        icmp_ln12_11_reg_1852 <= icmp_ln12_11_fu_1036_p2;
        icmp_ln12_12_reg_1862 <= icmp_ln12_12_fu_1045_p2;
        icmp_ln12_13_reg_1867 <= icmp_ln12_13_fu_1050_p2;
        icmp_ln12_14_reg_1877 <= icmp_ln12_14_fu_1059_p2;
        icmp_ln12_15_reg_1882 <= icmp_ln12_15_fu_1064_p2;
        icmp_ln12_16_reg_1892 <= icmp_ln12_16_fu_1073_p2;
        icmp_ln12_17_reg_1897 <= icmp_ln12_17_fu_1078_p2;
        icmp_ln12_18_reg_1907 <= icmp_ln12_18_fu_1087_p2;
        icmp_ln12_19_reg_1912 <= icmp_ln12_19_fu_1092_p2;
        icmp_ln12_1_reg_1777 <= icmp_ln12_1_fu_966_p2;
        icmp_ln12_20_reg_1922 <= icmp_ln12_20_fu_1101_p2;
        icmp_ln12_21_reg_1927 <= icmp_ln12_21_fu_1106_p2;
        icmp_ln12_22_reg_1937 <= icmp_ln12_22_fu_1115_p2;
        icmp_ln12_23_reg_1942 <= icmp_ln12_23_fu_1120_p2;
        icmp_ln12_24_reg_1952 <= icmp_ln12_24_fu_1129_p2;
        icmp_ln12_25_reg_1957 <= icmp_ln12_25_fu_1134_p2;
        icmp_ln12_26_reg_1967 <= icmp_ln12_26_fu_1143_p2;
        icmp_ln12_27_reg_1972 <= icmp_ln12_27_fu_1148_p2;
        icmp_ln12_28_reg_1982 <= icmp_ln12_28_fu_1157_p2;
        icmp_ln12_29_reg_1987 <= icmp_ln12_29_fu_1162_p2;
        icmp_ln12_2_reg_1787 <= icmp_ln12_2_fu_975_p2;
        icmp_ln12_30_reg_1997 <= icmp_ln12_30_fu_1171_p2;
        icmp_ln12_31_reg_2002 <= icmp_ln12_31_fu_1176_p2;
        icmp_ln12_3_reg_1792 <= icmp_ln12_3_fu_980_p2;
        icmp_ln12_4_reg_1802 <= icmp_ln12_4_fu_989_p2;
        icmp_ln12_5_reg_1807 <= icmp_ln12_5_fu_994_p2;
        icmp_ln12_6_reg_1817 <= icmp_ln12_6_fu_1003_p2;
        icmp_ln12_7_reg_1822 <= icmp_ln12_7_fu_1008_p2;
        icmp_ln12_8_reg_1832 <= icmp_ln12_8_fu_1017_p2;
        icmp_ln12_9_reg_1837 <= icmp_ln12_9_fu_1022_p2;
        icmp_ln12_reg_1772 <= icmp_ln12_fu_961_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln5_reg_1491 <= icmp_ln5_fu_390_p2;
        trunc_ln6_reg_1500 <= {{add_ln15_1_fu_458_p2[63:6]}};
        trunc_ln8_s_reg_1495 <= {{add_ln8_1_fu_424_p2[63:6]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001))) begin
        select_ln12_10_reg_2057 <= select_ln12_10_fu_1361_p3;
        select_ln12_11_reg_2062 <= select_ln12_11_fu_1378_p3;
        select_ln12_12_reg_2067 <= select_ln12_12_fu_1395_p3;
        select_ln12_13_reg_2072 <= select_ln12_13_fu_1412_p3;
        select_ln12_14_reg_2077 <= select_ln12_14_fu_1429_p3;
        select_ln12_15_reg_2082 <= select_ln12_15_fu_1446_p3;
        select_ln12_1_reg_2012 <= select_ln12_1_fu_1208_p3;
        select_ln12_2_reg_2017 <= select_ln12_2_fu_1225_p3;
        select_ln12_3_reg_2022 <= select_ln12_3_fu_1242_p3;
        select_ln12_4_reg_2027 <= select_ln12_4_fu_1259_p3;
        select_ln12_5_reg_2032 <= select_ln12_5_fu_1276_p3;
        select_ln12_6_reg_2037 <= select_ln12_6_fu_1293_p3;
        select_ln12_7_reg_2042 <= select_ln12_7_fu_1310_p3;
        select_ln12_8_reg_2047 <= select_ln12_8_fu_1327_p3;
        select_ln12_9_reg_2052 <= select_ln12_9_fu_1344_p3;
        select_ln12_reg_2007 <= select_ln12_fu_1191_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001))) begin
        tmp_10_reg_1657 <= {{m_axi_mem_RDATA[190:183]}};
        tmp_12_reg_1667 <= {{m_axi_mem_RDATA[222:215]}};
        tmp_14_reg_1677 <= {{m_axi_mem_RDATA[254:247]}};
        tmp_16_reg_1687 <= {{m_axi_mem_RDATA[286:279]}};
        tmp_18_reg_1697 <= {{m_axi_mem_RDATA[318:311]}};
        tmp_20_reg_1707 <= {{m_axi_mem_RDATA[350:343]}};
        tmp_22_reg_1717 <= {{m_axi_mem_RDATA[382:375]}};
        tmp_24_reg_1727 <= {{m_axi_mem_RDATA[414:407]}};
        tmp_26_reg_1737 <= {{m_axi_mem_RDATA[446:439]}};
        tmp_28_reg_1747 <= {{m_axi_mem_RDATA[478:471]}};
        tmp_2_reg_1617 <= {{m_axi_mem_RDATA[62:55]}};
        tmp_30_reg_1757 <= {{m_axi_mem_RDATA[510:503]}};
        tmp_4_reg_1627 <= {{m_axi_mem_RDATA[94:87]}};
        tmp_6_reg_1637 <= {{m_axi_mem_RDATA[126:119]}};
        tmp_8_reg_1647 <= {{m_axi_mem_RDATA[158:151]}};
        tmp_reg_1607 <= {{m_axi_mem_RDATA[30:23]}};
        trunc_ln12_10_reg_1722 <= {{m_axi_mem_RDATA[374:352]}};
        trunc_ln12_11_reg_1732 <= {{m_axi_mem_RDATA[406:384]}};
        trunc_ln12_12_reg_1742 <= {{m_axi_mem_RDATA[438:416]}};
        trunc_ln12_13_reg_1752 <= {{m_axi_mem_RDATA[470:448]}};
        trunc_ln12_14_reg_1762 <= {{m_axi_mem_RDATA[502:480]}};
        trunc_ln12_1_reg_1622 <= {{m_axi_mem_RDATA[54:32]}};
        trunc_ln12_2_reg_1632 <= {{m_axi_mem_RDATA[86:64]}};
        trunc_ln12_3_reg_1642 <= {{m_axi_mem_RDATA[118:96]}};
        trunc_ln12_4_reg_1652 <= {{m_axi_mem_RDATA[150:128]}};
        trunc_ln12_5_reg_1662 <= {{m_axi_mem_RDATA[182:160]}};
        trunc_ln12_6_reg_1672 <= {{m_axi_mem_RDATA[214:192]}};
        trunc_ln12_7_reg_1682 <= {{m_axi_mem_RDATA[246:224]}};
        trunc_ln12_8_reg_1692 <= {{m_axi_mem_RDATA[278:256]}};
        trunc_ln12_9_reg_1702 <= {{m_axi_mem_RDATA[310:288]}};
        trunc_ln12_reg_1612 <= trunc_ln12_fu_653_p1;
        trunc_ln12_s_reg_1712 <= {{m_axi_mem_RDATA[342:320]}};
        trunc_ln8_10_reg_1571 <= {{m_axi_mem_RDATA[351:320]}};
        trunc_ln8_11_reg_1577 <= {{m_axi_mem_RDATA[383:352]}};
        trunc_ln8_12_reg_1583 <= {{m_axi_mem_RDATA[415:384]}};
        trunc_ln8_13_reg_1589 <= {{m_axi_mem_RDATA[447:416]}};
        trunc_ln8_14_reg_1595 <= {{m_axi_mem_RDATA[479:448]}};
        trunc_ln8_15_reg_1601 <= {{m_axi_mem_RDATA[511:480]}};
        trunc_ln8_1_reg_1517 <= {{m_axi_mem_RDATA[63:32]}};
        trunc_ln8_2_reg_1523 <= {{m_axi_mem_RDATA[95:64]}};
        trunc_ln8_3_reg_1529 <= {{m_axi_mem_RDATA[127:96]}};
        trunc_ln8_4_reg_1535 <= {{m_axi_mem_RDATA[159:128]}};
        trunc_ln8_5_reg_1541 <= {{m_axi_mem_RDATA[191:160]}};
        trunc_ln8_6_reg_1547 <= {{m_axi_mem_RDATA[223:192]}};
        trunc_ln8_7_reg_1553 <= {{m_axi_mem_RDATA[255:224]}};
        trunc_ln8_8_reg_1559 <= {{m_axi_mem_RDATA[287:256]}};
        trunc_ln8_9_reg_1565 <= {{m_axi_mem_RDATA[319:288]}};
        trunc_ln8_reg_1511 <= trunc_ln8_fu_489_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln5_fu_390_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_3 = 13'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_238;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)))) begin
        grp_fu_294_ce = 1'b1;
    end else begin
        grp_fu_294_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)))) begin
        grp_fu_299_ce = 1'b1;
    end else begin
        grp_fu_299_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)))) begin
        grp_fu_304_ce = 1'b1;
    end else begin
        grp_fu_304_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)))) begin
        grp_fu_309_ce = 1'b1;
    end else begin
        grp_fu_309_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)))) begin
        grp_fu_314_ce = 1'b1;
    end else begin
        grp_fu_314_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)))) begin
        grp_fu_319_ce = 1'b1;
    end else begin
        grp_fu_319_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)))) begin
        grp_fu_324_ce = 1'b1;
    end else begin
        grp_fu_324_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)))) begin
        grp_fu_329_ce = 1'b1;
    end else begin
        grp_fu_329_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)))) begin
        grp_fu_334_ce = 1'b1;
    end else begin
        grp_fu_334_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)))) begin
        grp_fu_339_ce = 1'b1;
    end else begin
        grp_fu_339_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)))) begin
        grp_fu_344_ce = 1'b1;
    end else begin
        grp_fu_344_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)))) begin
        grp_fu_349_ce = 1'b1;
    end else begin
        grp_fu_349_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)))) begin
        grp_fu_354_ce = 1'b1;
    end else begin
        grp_fu_354_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)))) begin
        grp_fu_359_ce = 1'b1;
    end else begin
        grp_fu_359_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)))) begin
        grp_fu_364_ce = 1'b1;
    end else begin
        grp_fu_364_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)))) begin
        grp_fu_369_ce = 1'b1;
    end else begin
        grp_fu_369_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln5_reg_1491 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        m_axi_mem_ARVALID = 1'b1;
    end else begin
        m_axi_mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln5_reg_1491 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001))) begin
        m_axi_mem_AWVALID = 1'b1;
    end else begin
        m_axi_mem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_mem_BREADY = 1'b1;
    end else begin
        m_axi_mem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln5_reg_1491 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001))) begin
        m_axi_mem_RREADY = 1'b1;
    end else begin
        m_axi_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln5_reg_1491 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001))) begin
        m_axi_mem_WVALID = 1'b1;
    end else begin
        m_axi_mem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln5_reg_1491 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        mem_blk_n_AR = m_axi_mem_ARREADY;
    end else begin
        mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln5_reg_1491 == 1'd0) & (1'b0 == ap_block_pp0_stage11))) begin
        mem_blk_n_AW = m_axi_mem_AWREADY;
    end else begin
        mem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_blk_n_B = m_axi_mem_BVALID;
    end else begin
        mem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln5_reg_1491 == 1'd0) & (1'b0 == ap_block_pp0_stage9))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln5_reg_1491 == 1'd0) & (1'b0 == ap_block_pp0_stage12))) begin
        mem_blk_n_W = m_axi_mem_WREADY;
    end else begin
        mem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_1_fu_458_p2 = (zext_ln15_1_fu_454_p1 + A);

assign add_ln15_fu_440_p2 = (zext_ln8_fu_402_p1 + wo_cast_fu_378_p1);

assign add_ln5_fu_396_p2 = (ap_sig_allocacmp_i_3 + 13'd1);

assign add_ln8_1_fu_424_p2 = (zext_ln8_1_fu_420_p1 + A);

assign add_ln8_fu_406_p2 = (zext_ln8_fu_402_p1 + zext_ln15_fu_374_p1);

assign and_ln12_10_fu_1355_p2 = (or_ln12_10_fu_1351_p2 & grp_fu_344_p2);

assign and_ln12_11_fu_1372_p2 = (or_ln12_11_fu_1368_p2 & grp_fu_349_p2);

assign and_ln12_12_fu_1389_p2 = (or_ln12_12_fu_1385_p2 & grp_fu_354_p2);

assign and_ln12_13_fu_1406_p2 = (or_ln12_13_fu_1402_p2 & grp_fu_359_p2);

assign and_ln12_14_fu_1423_p2 = (or_ln12_14_fu_1419_p2 & grp_fu_364_p2);

assign and_ln12_15_fu_1440_p2 = (or_ln12_15_fu_1436_p2 & grp_fu_369_p2);

assign and_ln12_1_fu_1202_p2 = (or_ln12_1_fu_1198_p2 & grp_fu_299_p2);

assign and_ln12_2_fu_1219_p2 = (or_ln12_2_fu_1215_p2 & grp_fu_304_p2);

assign and_ln12_3_fu_1236_p2 = (or_ln12_3_fu_1232_p2 & grp_fu_309_p2);

assign and_ln12_4_fu_1253_p2 = (or_ln12_4_fu_1249_p2 & grp_fu_314_p2);

assign and_ln12_5_fu_1270_p2 = (or_ln12_5_fu_1266_p2 & grp_fu_319_p2);

assign and_ln12_6_fu_1287_p2 = (or_ln12_6_fu_1283_p2 & grp_fu_324_p2);

assign and_ln12_7_fu_1304_p2 = (or_ln12_7_fu_1300_p2 & grp_fu_329_p2);

assign and_ln12_8_fu_1321_p2 = (or_ln12_8_fu_1317_p2 & grp_fu_334_p2);

assign and_ln12_9_fu_1338_p2 = (or_ln12_9_fu_1334_p2 & grp_fu_339_p2);

assign and_ln12_fu_1185_p2 = (or_ln12_fu_1181_p2 & grp_fu_294_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state18_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state18_pp0_stage0_iter1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state12_io));
end

always @ (*) begin
    ap_block_pp0_stage11_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state12_io));
end

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state13_io));
end

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state13_io));
end

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io));
end

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage9_iter0));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage9_iter0));
end

always @ (*) begin
    ap_block_state10_pp0_stage9_iter0 = ((m_axi_mem_RVALID == 1'b0) & (icmp_ln5_reg_1491 == 1'd0));
end

always @ (*) begin
    ap_block_state12_io = ((m_axi_mem_AWREADY == 1'b0) & (icmp_ln5_reg_1491 == 1'd0));
end

always @ (*) begin
    ap_block_state13_io = ((m_axi_mem_WREADY == 1'b0) & (icmp_ln5_reg_1491 == 1'd0));
end

always @ (*) begin
    ap_block_state18_pp0_stage0_iter1 = (m_axi_mem_BVALID == 1'b0);
end

always @ (*) begin
    ap_block_state2_io = ((m_axi_mem_ARREADY == 1'b0) & (icmp_ln5_reg_1491 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_294_p0 = trunc_ln8_reg_1511;

assign grp_fu_299_p0 = trunc_ln8_1_reg_1517;

assign grp_fu_304_p0 = trunc_ln8_2_reg_1523;

assign grp_fu_309_p0 = trunc_ln8_3_reg_1529;

assign grp_fu_314_p0 = trunc_ln8_4_reg_1535;

assign grp_fu_319_p0 = trunc_ln8_5_reg_1541;

assign grp_fu_324_p0 = trunc_ln8_6_reg_1547;

assign grp_fu_329_p0 = trunc_ln8_7_reg_1553;

assign grp_fu_334_p0 = trunc_ln8_8_reg_1559;

assign grp_fu_339_p0 = trunc_ln8_9_reg_1565;

assign grp_fu_344_p0 = trunc_ln8_10_reg_1571;

assign grp_fu_349_p0 = trunc_ln8_11_reg_1577;

assign grp_fu_354_p0 = trunc_ln8_12_reg_1583;

assign grp_fu_359_p0 = trunc_ln8_13_reg_1589;

assign grp_fu_364_p0 = trunc_ln8_14_reg_1595;

assign grp_fu_369_p0 = trunc_ln8_15_reg_1601;

assign icmp_ln12_10_fu_1031_p2 = ((tmp_10_reg_1657 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln12_11_fu_1036_p2 = ((trunc_ln12_5_reg_1662 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_12_fu_1045_p2 = ((tmp_12_reg_1667 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln12_13_fu_1050_p2 = ((trunc_ln12_6_reg_1672 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_14_fu_1059_p2 = ((tmp_14_reg_1677 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln12_15_fu_1064_p2 = ((trunc_ln12_7_reg_1682 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_16_fu_1073_p2 = ((tmp_16_reg_1687 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln12_17_fu_1078_p2 = ((trunc_ln12_8_reg_1692 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_18_fu_1087_p2 = ((tmp_18_reg_1697 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln12_19_fu_1092_p2 = ((trunc_ln12_9_reg_1702 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_1_fu_966_p2 = ((trunc_ln12_reg_1612 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_20_fu_1101_p2 = ((tmp_20_reg_1707 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln12_21_fu_1106_p2 = ((trunc_ln12_s_reg_1712 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_22_fu_1115_p2 = ((tmp_22_reg_1717 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln12_23_fu_1120_p2 = ((trunc_ln12_10_reg_1722 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_24_fu_1129_p2 = ((tmp_24_reg_1727 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln12_25_fu_1134_p2 = ((trunc_ln12_11_reg_1732 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_26_fu_1143_p2 = ((tmp_26_reg_1737 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln12_27_fu_1148_p2 = ((trunc_ln12_12_reg_1742 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_28_fu_1157_p2 = ((tmp_28_reg_1747 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln12_29_fu_1162_p2 = ((trunc_ln12_13_reg_1752 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_2_fu_975_p2 = ((tmp_2_reg_1617 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln12_30_fu_1171_p2 = ((tmp_30_reg_1757 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln12_31_fu_1176_p2 = ((trunc_ln12_14_reg_1762 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_3_fu_980_p2 = ((trunc_ln12_1_reg_1622 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_4_fu_989_p2 = ((tmp_4_reg_1627 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln12_5_fu_994_p2 = ((trunc_ln12_2_reg_1632 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_6_fu_1003_p2 = ((tmp_6_reg_1637 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln12_7_fu_1008_p2 = ((trunc_ln12_3_reg_1642 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_8_fu_1017_p2 = ((tmp_8_reg_1647 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln12_9_fu_1022_p2 = ((trunc_ln12_4_reg_1652 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_961_p2 = ((tmp_reg_1607 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln5_fu_390_p2 = ((ap_sig_allocacmp_i_3 == N) ? 1'b1 : 1'b0);

assign m_axi_mem_ARADDR = sext_ln8_fu_479_p1;

assign m_axi_mem_ARBURST = 2'd0;

assign m_axi_mem_ARCACHE = 4'd0;

assign m_axi_mem_ARID = 1'd0;

assign m_axi_mem_ARLEN = 32'd1;

assign m_axi_mem_ARLOCK = 2'd0;

assign m_axi_mem_ARPROT = 3'd0;

assign m_axi_mem_ARQOS = 4'd0;

assign m_axi_mem_ARREGION = 4'd0;

assign m_axi_mem_ARSIZE = 3'd0;

assign m_axi_mem_ARUSER = 1'd0;

assign m_axi_mem_AWADDR = sext_ln15_fu_1453_p1;

assign m_axi_mem_AWBURST = 2'd0;

assign m_axi_mem_AWCACHE = 4'd0;

assign m_axi_mem_AWID = 1'd0;

assign m_axi_mem_AWLEN = 32'd1;

assign m_axi_mem_AWLOCK = 2'd0;

assign m_axi_mem_AWPROT = 3'd0;

assign m_axi_mem_AWQOS = 4'd0;

assign m_axi_mem_AWREGION = 4'd0;

assign m_axi_mem_AWSIZE = 3'd0;

assign m_axi_mem_AWUSER = 1'd0;

assign m_axi_mem_WDATA = {{{{{{{{{{{{{{{{select_ln12_15_reg_2082}, {select_ln12_14_reg_2077}}, {select_ln12_13_reg_2072}}, {select_ln12_12_reg_2067}}, {select_ln12_11_reg_2062}}, {select_ln12_10_reg_2057}}, {select_ln12_9_reg_2052}}, {select_ln12_8_reg_2047}}, {select_ln12_7_reg_2042}}, {select_ln12_6_reg_2037}}, {select_ln12_5_reg_2032}}, {select_ln12_4_reg_2027}}, {select_ln12_3_reg_2022}}, {select_ln12_2_reg_2017}}, {select_ln12_1_reg_2012}}, {select_ln12_reg_2007}};

assign m_axi_mem_WID = 1'd0;

assign m_axi_mem_WLAST = 1'b0;

assign m_axi_mem_WSTRB = 64'd18446744073709551615;

assign m_axi_mem_WUSER = 1'd0;

assign or_ln12_10_fu_1351_p2 = (icmp_ln12_21_reg_1927 | icmp_ln12_20_reg_1922);

assign or_ln12_11_fu_1368_p2 = (icmp_ln12_23_reg_1942 | icmp_ln12_22_reg_1937);

assign or_ln12_12_fu_1385_p2 = (icmp_ln12_25_reg_1957 | icmp_ln12_24_reg_1952);

assign or_ln12_13_fu_1402_p2 = (icmp_ln12_27_reg_1972 | icmp_ln12_26_reg_1967);

assign or_ln12_14_fu_1419_p2 = (icmp_ln12_29_reg_1987 | icmp_ln12_28_reg_1982);

assign or_ln12_15_fu_1436_p2 = (icmp_ln12_31_reg_2002 | icmp_ln12_30_reg_1997);

assign or_ln12_1_fu_1198_p2 = (icmp_ln12_3_reg_1792 | icmp_ln12_2_reg_1787);

assign or_ln12_2_fu_1215_p2 = (icmp_ln12_5_reg_1807 | icmp_ln12_4_reg_1802);

assign or_ln12_3_fu_1232_p2 = (icmp_ln12_7_reg_1822 | icmp_ln12_6_reg_1817);

assign or_ln12_4_fu_1249_p2 = (icmp_ln12_9_reg_1837 | icmp_ln12_8_reg_1832);

assign or_ln12_5_fu_1266_p2 = (icmp_ln12_11_reg_1852 | icmp_ln12_10_reg_1847);

assign or_ln12_6_fu_1283_p2 = (icmp_ln12_13_reg_1867 | icmp_ln12_12_reg_1862);

assign or_ln12_7_fu_1300_p2 = (icmp_ln12_15_reg_1882 | icmp_ln12_14_reg_1877);

assign or_ln12_8_fu_1317_p2 = (icmp_ln12_17_reg_1897 | icmp_ln12_16_reg_1892);

assign or_ln12_9_fu_1334_p2 = (icmp_ln12_19_reg_1912 | icmp_ln12_18_reg_1907);

assign or_ln12_fu_1181_p2 = (icmp_ln12_reg_1772 | icmp_ln12_1_reg_1777);

assign select_ln12_10_fu_1361_p3 = ((and_ln12_10_fu_1355_p2[0:0] == 1'b1) ? trunc_ln8_10_reg_1571 : 32'd0);

assign select_ln12_11_fu_1378_p3 = ((and_ln12_11_fu_1372_p2[0:0] == 1'b1) ? trunc_ln8_11_reg_1577 : 32'd0);

assign select_ln12_12_fu_1395_p3 = ((and_ln12_12_fu_1389_p2[0:0] == 1'b1) ? trunc_ln8_12_reg_1583 : 32'd0);

assign select_ln12_13_fu_1412_p3 = ((and_ln12_13_fu_1406_p2[0:0] == 1'b1) ? trunc_ln8_13_reg_1589 : 32'd0);

assign select_ln12_14_fu_1429_p3 = ((and_ln12_14_fu_1423_p2[0:0] == 1'b1) ? trunc_ln8_14_reg_1595 : 32'd0);

assign select_ln12_15_fu_1446_p3 = ((and_ln12_15_fu_1440_p2[0:0] == 1'b1) ? trunc_ln8_15_reg_1601 : 32'd0);

assign select_ln12_1_fu_1208_p3 = ((and_ln12_1_fu_1202_p2[0:0] == 1'b1) ? trunc_ln8_1_reg_1517 : 32'd0);

assign select_ln12_2_fu_1225_p3 = ((and_ln12_2_fu_1219_p2[0:0] == 1'b1) ? trunc_ln8_2_reg_1523 : 32'd0);

assign select_ln12_3_fu_1242_p3 = ((and_ln12_3_fu_1236_p2[0:0] == 1'b1) ? trunc_ln8_3_reg_1529 : 32'd0);

assign select_ln12_4_fu_1259_p3 = ((and_ln12_4_fu_1253_p2[0:0] == 1'b1) ? trunc_ln8_4_reg_1535 : 32'd0);

assign select_ln12_5_fu_1276_p3 = ((and_ln12_5_fu_1270_p2[0:0] == 1'b1) ? trunc_ln8_5_reg_1541 : 32'd0);

assign select_ln12_6_fu_1293_p3 = ((and_ln12_6_fu_1287_p2[0:0] == 1'b1) ? trunc_ln8_6_reg_1547 : 32'd0);

assign select_ln12_7_fu_1310_p3 = ((and_ln12_7_fu_1304_p2[0:0] == 1'b1) ? trunc_ln8_7_reg_1553 : 32'd0);

assign select_ln12_8_fu_1327_p3 = ((and_ln12_8_fu_1321_p2[0:0] == 1'b1) ? trunc_ln8_8_reg_1559 : 32'd0);

assign select_ln12_9_fu_1344_p3 = ((and_ln12_9_fu_1338_p2[0:0] == 1'b1) ? trunc_ln8_9_reg_1565 : 32'd0);

assign select_ln12_fu_1191_p3 = ((and_ln12_fu_1185_p2[0:0] == 1'b1) ? trunc_ln8_reg_1511 : 32'd0);

assign sext_ln15_fu_1453_p1 = $signed(trunc_ln6_reg_1500);

assign sext_ln8_fu_479_p1 = $signed(trunc_ln8_s_reg_1495);

assign shl_ln8_fu_412_p3 = {{add_ln8_fu_406_p2}, {6'd0}};

assign shl_ln_fu_446_p3 = {{add_ln15_fu_440_p2}, {6'd0}};

assign trunc_ln12_fu_653_p1 = m_axi_mem_RDATA[22:0];

assign trunc_ln8_fu_489_p1 = m_axi_mem_RDATA[31:0];

assign wo_cast_fu_378_p1 = wo;

assign zext_ln15_1_fu_454_p1 = shl_ln_fu_446_p3;

assign zext_ln15_fu_374_p1 = ro;

assign zext_ln8_1_fu_420_p1 = shl_ln8_fu_412_p3;

assign zext_ln8_fu_402_p1 = ap_sig_allocacmp_i_3;

endmodule //acti_proc_activ
